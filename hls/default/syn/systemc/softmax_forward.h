// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _softmax_forward_HH_
#define _softmax_forward_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "top_fadd_32ns_32nAem.h"
#include "top_fmul_32ns_32nBew.h"
#include "softmax_forward_sJfO.h"
#include "softmax_forward_sKfY.h"

namespace ap_rtl {

struct softmax_forward : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<7> > dense_output_address0;
    sc_out< sc_logic > dense_output_ce0;
    sc_in< sc_lv<32> > dense_output_q0;
    sc_out< sc_lv<4> > softmax_output_address0;
    sc_out< sc_logic > softmax_output_ce0;
    sc_out< sc_logic > softmax_output_we0;
    sc_out< sc_lv<32> > softmax_output_d0;
    sc_in< sc_lv<32> > softmax_output_q0;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    softmax_forward(sc_module_name name);
    SC_HAS_PROCESS(softmax_forward);

    ~softmax_forward();

    sc_trace_file* mVcdFile;

    softmax_forward_sJfO* softmax_kernel_U;
    softmax_forward_sKfY* softmax_bias_U;
    top_fadd_32ns_32nAem<1,4,32,32,32>* top_fadd_32ns_32nAem_U40;
    top_fmul_32ns_32nBew<1,3,32,32,32>* top_fmul_32ns_32nBew_U41;
    sc_signal< sc_lv<18> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<11> > softmax_kernel_address0;
    sc_signal< sc_logic > softmax_kernel_ce0;
    sc_signal< sc_lv<32> > softmax_kernel_q0;
    sc_signal< sc_lv<4> > softmax_bias_address0;
    sc_signal< sc_logic > softmax_bias_ce0;
    sc_signal< sc_lv<32> > softmax_bias_q0;
    sc_signal< sc_lv<32> > grp_fu_143_p2;
    sc_signal< sc_lv<32> > reg_152;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_logic > ap_CS_fsm_state17;
    sc_signal< sc_lv<4> > i_3_fu_164_p2;
    sc_signal< sc_lv<4> > i_3_reg_257;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<12> > tmp_cast_fu_175_p1;
    sc_signal< sc_lv<12> > tmp_cast_reg_262;
    sc_signal< sc_lv<1> > exitcond2_fu_158_p2;
    sc_signal< sc_lv<4> > softmax_output_addr_reg_267;
    sc_signal< sc_lv<8> > j_1_fu_185_p2;
    sc_signal< sc_lv<8> > j_1_reg_275;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > exitcond1_fu_179_p2;
    sc_signal< sc_lv<32> > softmax_kernel_load_reg_290;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > dense_output_load_reg_295;
    sc_signal< sc_lv<32> > grp_fu_148_p2;
    sc_signal< sc_lv<32> > tmp_8_reg_300;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<4> > i_2_fu_242_p2;
    sc_signal< sc_lv<4> > i_2_reg_308;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_lv<1> > exitcond_fu_236_p2;
    sc_signal< sc_lv<4> > softmax_output_addr_1_reg_318;
    sc_signal< sc_lv<32> > softmax_bias_load_reg_323;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_lv<32> > softmax_output_load_reg_328;
    sc_signal< sc_lv<4> > i_reg_97;
    sc_signal< sc_lv<32> > storemerge_reg_108;
    sc_signal< sc_lv<8> > j_reg_121;
    sc_signal< sc_lv<4> > i1_reg_132;
    sc_signal< sc_logic > ap_CS_fsm_state18;
    sc_signal< sc_lv<64> > tmp_fu_170_p1;
    sc_signal< sc_lv<64> > tmp_11_cast_fu_231_p1;
    sc_signal< sc_lv<64> > tmp_7_fu_191_p1;
    sc_signal< sc_lv<64> > tmp_3_fu_248_p1;
    sc_signal< sc_lv<32> > grp_fu_143_p0;
    sc_signal< sc_lv<32> > grp_fu_143_p1;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<11> > tmp_5_fu_196_p3;
    sc_signal< sc_lv<9> > tmp_6_fu_208_p3;
    sc_signal< sc_lv<12> > p_shl1_cast_fu_216_p1;
    sc_signal< sc_lv<12> > p_shl_cast_fu_204_p1;
    sc_signal< sc_lv<12> > tmp_s_fu_220_p2;
    sc_signal< sc_lv<12> > tmp_1_fu_226_p2;
    sc_signal< sc_lv<18> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<18> ap_ST_fsm_state1;
    static const sc_lv<18> ap_ST_fsm_state2;
    static const sc_lv<18> ap_ST_fsm_state3;
    static const sc_lv<18> ap_ST_fsm_state4;
    static const sc_lv<18> ap_ST_fsm_state5;
    static const sc_lv<18> ap_ST_fsm_state6;
    static const sc_lv<18> ap_ST_fsm_state7;
    static const sc_lv<18> ap_ST_fsm_state8;
    static const sc_lv<18> ap_ST_fsm_state9;
    static const sc_lv<18> ap_ST_fsm_state10;
    static const sc_lv<18> ap_ST_fsm_state11;
    static const sc_lv<18> ap_ST_fsm_state12;
    static const sc_lv<18> ap_ST_fsm_state13;
    static const sc_lv<18> ap_ST_fsm_state14;
    static const sc_lv<18> ap_ST_fsm_state15;
    static const sc_lv<18> ap_ST_fsm_state16;
    static const sc_lv<18> ap_ST_fsm_state17;
    static const sc_lv<18> ap_ST_fsm_state18;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_11;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<8> ap_const_lv8_80;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state14();
    void thread_ap_CS_fsm_state17();
    void thread_ap_CS_fsm_state18();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_dense_output_address0();
    void thread_dense_output_ce0();
    void thread_exitcond1_fu_179_p2();
    void thread_exitcond2_fu_158_p2();
    void thread_exitcond_fu_236_p2();
    void thread_grp_fu_143_p0();
    void thread_grp_fu_143_p1();
    void thread_i_2_fu_242_p2();
    void thread_i_3_fu_164_p2();
    void thread_j_1_fu_185_p2();
    void thread_p_shl1_cast_fu_216_p1();
    void thread_p_shl_cast_fu_204_p1();
    void thread_softmax_bias_address0();
    void thread_softmax_bias_ce0();
    void thread_softmax_kernel_address0();
    void thread_softmax_kernel_ce0();
    void thread_softmax_output_address0();
    void thread_softmax_output_ce0();
    void thread_softmax_output_d0();
    void thread_softmax_output_we0();
    void thread_tmp_11_cast_fu_231_p1();
    void thread_tmp_1_fu_226_p2();
    void thread_tmp_3_fu_248_p1();
    void thread_tmp_5_fu_196_p3();
    void thread_tmp_6_fu_208_p3();
    void thread_tmp_7_fu_191_p1();
    void thread_tmp_cast_fu_175_p1();
    void thread_tmp_fu_170_p1();
    void thread_tmp_s_fu_220_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
