// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "softmax_forward.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic softmax_forward::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic softmax_forward::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<18> softmax_forward::ap_ST_fsm_state1 = "1";
const sc_lv<18> softmax_forward::ap_ST_fsm_state2 = "10";
const sc_lv<18> softmax_forward::ap_ST_fsm_state3 = "100";
const sc_lv<18> softmax_forward::ap_ST_fsm_state4 = "1000";
const sc_lv<18> softmax_forward::ap_ST_fsm_state5 = "10000";
const sc_lv<18> softmax_forward::ap_ST_fsm_state6 = "100000";
const sc_lv<18> softmax_forward::ap_ST_fsm_state7 = "1000000";
const sc_lv<18> softmax_forward::ap_ST_fsm_state8 = "10000000";
const sc_lv<18> softmax_forward::ap_ST_fsm_state9 = "100000000";
const sc_lv<18> softmax_forward::ap_ST_fsm_state10 = "1000000000";
const sc_lv<18> softmax_forward::ap_ST_fsm_state11 = "10000000000";
const sc_lv<18> softmax_forward::ap_ST_fsm_state12 = "100000000000";
const sc_lv<18> softmax_forward::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<18> softmax_forward::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<18> softmax_forward::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<18> softmax_forward::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<18> softmax_forward::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<18> softmax_forward::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<32> softmax_forward::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> softmax_forward::ap_const_lv32_A = "1010";
const sc_lv<32> softmax_forward::ap_const_lv32_10 = "10000";
const sc_lv<32> softmax_forward::ap_const_lv32_1 = "1";
const sc_lv<1> softmax_forward::ap_const_lv1_0 = "0";
const sc_lv<32> softmax_forward::ap_const_lv32_2 = "10";
const sc_lv<32> softmax_forward::ap_const_lv32_3 = "11";
const sc_lv<32> softmax_forward::ap_const_lv32_6 = "110";
const sc_lv<32> softmax_forward::ap_const_lv32_B = "1011";
const sc_lv<32> softmax_forward::ap_const_lv32_C = "1100";
const sc_lv<4> softmax_forward::ap_const_lv4_0 = "0000";
const sc_lv<1> softmax_forward::ap_const_lv1_1 = "1";
const sc_lv<8> softmax_forward::ap_const_lv8_0 = "00000000";
const sc_lv<32> softmax_forward::ap_const_lv32_11 = "10001";
const sc_lv<32> softmax_forward::ap_const_lv32_7 = "111";
const sc_lv<32> softmax_forward::ap_const_lv32_D = "1101";
const sc_lv<32> softmax_forward::ap_const_lv32_4 = "100";
const sc_lv<4> softmax_forward::ap_const_lv4_A = "1010";
const sc_lv<4> softmax_forward::ap_const_lv4_1 = "1";
const sc_lv<8> softmax_forward::ap_const_lv8_80 = "10000000";
const sc_lv<8> softmax_forward::ap_const_lv8_1 = "1";
const sc_lv<3> softmax_forward::ap_const_lv3_0 = "000";
const bool softmax_forward::ap_const_boolean_1 = true;

softmax_forward::softmax_forward(sc_module_name name) : sc_module(name), mVcdFile(0) {
    softmax_kernel_U = new softmax_forward_sJfO("softmax_kernel_U");
    softmax_kernel_U->clk(ap_clk);
    softmax_kernel_U->reset(ap_rst);
    softmax_kernel_U->address0(softmax_kernel_address0);
    softmax_kernel_U->ce0(softmax_kernel_ce0);
    softmax_kernel_U->q0(softmax_kernel_q0);
    softmax_bias_U = new softmax_forward_sKfY("softmax_bias_U");
    softmax_bias_U->clk(ap_clk);
    softmax_bias_U->reset(ap_rst);
    softmax_bias_U->address0(softmax_bias_address0);
    softmax_bias_U->ce0(softmax_bias_ce0);
    softmax_bias_U->q0(softmax_bias_q0);
    top_fadd_32ns_32nAem_U40 = new top_fadd_32ns_32nAem<1,4,32,32,32>("top_fadd_32ns_32nAem_U40");
    top_fadd_32ns_32nAem_U40->clk(ap_clk);
    top_fadd_32ns_32nAem_U40->reset(ap_rst);
    top_fadd_32ns_32nAem_U40->din0(grp_fu_143_p0);
    top_fadd_32ns_32nAem_U40->din1(grp_fu_143_p1);
    top_fadd_32ns_32nAem_U40->ce(ap_var_for_const0);
    top_fadd_32ns_32nAem_U40->dout(grp_fu_143_p2);
    top_fmul_32ns_32nBew_U41 = new top_fmul_32ns_32nBew<1,3,32,32,32>("top_fmul_32ns_32nBew_U41");
    top_fmul_32ns_32nBew_U41->clk(ap_clk);
    top_fmul_32ns_32nBew_U41->reset(ap_rst);
    top_fmul_32ns_32nBew_U41->din0(softmax_kernel_load_reg_290);
    top_fmul_32ns_32nBew_U41->din1(dense_output_load_reg_295);
    top_fmul_32ns_32nBew_U41->ce(ap_var_for_const0);
    top_fmul_32ns_32nBew_U41->dout(grp_fu_148_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( exitcond_fu_236_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( exitcond_fu_236_p2 );

    SC_METHOD(thread_dense_output_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_7_fu_191_p1 );

    SC_METHOD(thread_dense_output_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_exitcond1_fu_179_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_reg_121 );

    SC_METHOD(thread_exitcond2_fu_158_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_97 );

    SC_METHOD(thread_exitcond_fu_236_p2);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( i1_reg_132 );

    SC_METHOD(thread_grp_fu_143_p0);
    sensitive << ( softmax_output_load_reg_328 );
    sensitive << ( storemerge_reg_108 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_grp_fu_143_p1);
    sensitive << ( tmp_8_reg_300 );
    sensitive << ( softmax_bias_load_reg_323 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_i_2_fu_242_p2);
    sensitive << ( i1_reg_132 );

    SC_METHOD(thread_i_3_fu_164_p2);
    sensitive << ( i_reg_97 );

    SC_METHOD(thread_j_1_fu_185_p2);
    sensitive << ( j_reg_121 );

    SC_METHOD(thread_p_shl1_cast_fu_216_p1);
    sensitive << ( tmp_6_fu_208_p3 );

    SC_METHOD(thread_p_shl_cast_fu_204_p1);
    sensitive << ( tmp_5_fu_196_p3 );

    SC_METHOD(thread_softmax_bias_address0);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_3_fu_248_p1 );

    SC_METHOD(thread_softmax_bias_ce0);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_softmax_kernel_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_11_cast_fu_231_p1 );

    SC_METHOD(thread_softmax_kernel_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_softmax_output_address0);
    sensitive << ( softmax_output_addr_reg_267 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( softmax_output_addr_1_reg_318 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( tmp_3_fu_248_p1 );

    SC_METHOD(thread_softmax_output_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_softmax_output_d0);
    sensitive << ( reg_152 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( storemerge_reg_108 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_softmax_output_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_tmp_11_cast_fu_231_p1);
    sensitive << ( tmp_1_fu_226_p2 );

    SC_METHOD(thread_tmp_1_fu_226_p2);
    sensitive << ( tmp_cast_reg_262 );
    sensitive << ( tmp_s_fu_220_p2 );

    SC_METHOD(thread_tmp_3_fu_248_p1);
    sensitive << ( i1_reg_132 );

    SC_METHOD(thread_tmp_5_fu_196_p3);
    sensitive << ( j_reg_121 );

    SC_METHOD(thread_tmp_6_fu_208_p3);
    sensitive << ( j_reg_121 );

    SC_METHOD(thread_tmp_7_fu_191_p1);
    sensitive << ( j_reg_121 );

    SC_METHOD(thread_tmp_cast_fu_175_p1);
    sensitive << ( i_reg_97 );

    SC_METHOD(thread_tmp_fu_170_p1);
    sensitive << ( i_reg_97 );

    SC_METHOD(thread_tmp_s_fu_220_p2);
    sensitive << ( p_shl1_cast_fu_216_p1 );
    sensitive << ( p_shl_cast_fu_204_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond2_fu_158_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond1_fu_179_p2 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( exitcond_fu_236_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "softmax_forward_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, dense_output_address0, "(port)dense_output_address0");
    sc_trace(mVcdFile, dense_output_ce0, "(port)dense_output_ce0");
    sc_trace(mVcdFile, dense_output_q0, "(port)dense_output_q0");
    sc_trace(mVcdFile, softmax_output_address0, "(port)softmax_output_address0");
    sc_trace(mVcdFile, softmax_output_ce0, "(port)softmax_output_ce0");
    sc_trace(mVcdFile, softmax_output_we0, "(port)softmax_output_we0");
    sc_trace(mVcdFile, softmax_output_d0, "(port)softmax_output_d0");
    sc_trace(mVcdFile, softmax_output_q0, "(port)softmax_output_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, softmax_kernel_address0, "softmax_kernel_address0");
    sc_trace(mVcdFile, softmax_kernel_ce0, "softmax_kernel_ce0");
    sc_trace(mVcdFile, softmax_kernel_q0, "softmax_kernel_q0");
    sc_trace(mVcdFile, softmax_bias_address0, "softmax_bias_address0");
    sc_trace(mVcdFile, softmax_bias_ce0, "softmax_bias_ce0");
    sc_trace(mVcdFile, softmax_bias_q0, "softmax_bias_q0");
    sc_trace(mVcdFile, grp_fu_143_p2, "grp_fu_143_p2");
    sc_trace(mVcdFile, reg_152, "reg_152");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, i_3_fu_164_p2, "i_3_fu_164_p2");
    sc_trace(mVcdFile, i_3_reg_257, "i_3_reg_257");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_cast_fu_175_p1, "tmp_cast_fu_175_p1");
    sc_trace(mVcdFile, tmp_cast_reg_262, "tmp_cast_reg_262");
    sc_trace(mVcdFile, exitcond2_fu_158_p2, "exitcond2_fu_158_p2");
    sc_trace(mVcdFile, softmax_output_addr_reg_267, "softmax_output_addr_reg_267");
    sc_trace(mVcdFile, j_1_fu_185_p2, "j_1_fu_185_p2");
    sc_trace(mVcdFile, j_1_reg_275, "j_1_reg_275");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, exitcond1_fu_179_p2, "exitcond1_fu_179_p2");
    sc_trace(mVcdFile, softmax_kernel_load_reg_290, "softmax_kernel_load_reg_290");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, dense_output_load_reg_295, "dense_output_load_reg_295");
    sc_trace(mVcdFile, grp_fu_148_p2, "grp_fu_148_p2");
    sc_trace(mVcdFile, tmp_8_reg_300, "tmp_8_reg_300");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, i_2_fu_242_p2, "i_2_fu_242_p2");
    sc_trace(mVcdFile, i_2_reg_308, "i_2_reg_308");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, exitcond_fu_236_p2, "exitcond_fu_236_p2");
    sc_trace(mVcdFile, softmax_output_addr_1_reg_318, "softmax_output_addr_1_reg_318");
    sc_trace(mVcdFile, softmax_bias_load_reg_323, "softmax_bias_load_reg_323");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, softmax_output_load_reg_328, "softmax_output_load_reg_328");
    sc_trace(mVcdFile, i_reg_97, "i_reg_97");
    sc_trace(mVcdFile, storemerge_reg_108, "storemerge_reg_108");
    sc_trace(mVcdFile, j_reg_121, "j_reg_121");
    sc_trace(mVcdFile, i1_reg_132, "i1_reg_132");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, tmp_fu_170_p1, "tmp_fu_170_p1");
    sc_trace(mVcdFile, tmp_11_cast_fu_231_p1, "tmp_11_cast_fu_231_p1");
    sc_trace(mVcdFile, tmp_7_fu_191_p1, "tmp_7_fu_191_p1");
    sc_trace(mVcdFile, tmp_3_fu_248_p1, "tmp_3_fu_248_p1");
    sc_trace(mVcdFile, grp_fu_143_p0, "grp_fu_143_p0");
    sc_trace(mVcdFile, grp_fu_143_p1, "grp_fu_143_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_5_fu_196_p3, "tmp_5_fu_196_p3");
    sc_trace(mVcdFile, tmp_6_fu_208_p3, "tmp_6_fu_208_p3");
    sc_trace(mVcdFile, p_shl1_cast_fu_216_p1, "p_shl1_cast_fu_216_p1");
    sc_trace(mVcdFile, p_shl_cast_fu_204_p1, "p_shl_cast_fu_204_p1");
    sc_trace(mVcdFile, tmp_s_fu_220_p2, "tmp_s_fu_220_p2");
    sc_trace(mVcdFile, tmp_1_fu_226_p2, "tmp_1_fu_226_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

softmax_forward::~softmax_forward() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete softmax_kernel_U;
    delete softmax_bias_U;
    delete top_fadd_32ns_32nAem_U40;
    delete top_fmul_32ns_32nBew_U41;
}

void softmax_forward::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void softmax_forward::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond2_fu_158_p2.read(), ap_const_lv1_1))) {
        i1_reg_132 = ap_const_lv4_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        i1_reg_132 = i_2_reg_308.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_179_p2.read(), ap_const_lv1_1))) {
        i_reg_97 = i_3_reg_257.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_97 = ap_const_lv4_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        j_reg_121 = j_1_reg_275.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(exitcond2_fu_158_p2.read(), ap_const_lv1_0))) {
        j_reg_121 = ap_const_lv8_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        storemerge_reg_108 = grp_fu_143_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(exitcond2_fu_158_p2.read(), ap_const_lv1_0))) {
        storemerge_reg_108 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        dense_output_load_reg_295 = dense_output_q0.read();
        softmax_kernel_load_reg_290 = softmax_kernel_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        i_2_reg_308 = i_2_fu_242_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_3_reg_257 = i_3_fu_164_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_1_reg_275 = j_1_fu_185_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        reg_152 = grp_fu_143_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        softmax_bias_load_reg_323 = softmax_bias_q0.read();
        softmax_output_load_reg_328 = softmax_output_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_236_p2.read()))) {
        softmax_output_addr_1_reg_318 =  (sc_lv<4>) (tmp_3_fu_248_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond2_fu_158_p2.read(), ap_const_lv1_0))) {
        softmax_output_addr_reg_267 =  (sc_lv<4>) (tmp_fu_170_p1.read());
        tmp_cast_reg_262 = tmp_cast_fu_175_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        tmp_8_reg_300 = grp_fu_148_p2.read();
    }
}

void softmax_forward::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void softmax_forward::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void softmax_forward::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void softmax_forward::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void softmax_forward::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void softmax_forward::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void softmax_forward::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void softmax_forward::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void softmax_forward::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void softmax_forward::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void softmax_forward::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void softmax_forward::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void softmax_forward::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void softmax_forward::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
          esl_seteq<1,1,1>(exitcond_fu_236_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void softmax_forward::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void softmax_forward::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_236_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void softmax_forward::thread_dense_output_address0() {
    dense_output_address0 =  (sc_lv<7>) (tmp_7_fu_191_p1.read());
}

void softmax_forward::thread_dense_output_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        dense_output_ce0 = ap_const_logic_1;
    } else {
        dense_output_ce0 = ap_const_logic_0;
    }
}

void softmax_forward::thread_exitcond1_fu_179_p2() {
    exitcond1_fu_179_p2 = (!j_reg_121.read().is_01() || !ap_const_lv8_80.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_121.read() == ap_const_lv8_80);
}

void softmax_forward::thread_exitcond2_fu_158_p2() {
    exitcond2_fu_158_p2 = (!i_reg_97.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_97.read() == ap_const_lv4_A);
}

void softmax_forward::thread_exitcond_fu_236_p2() {
    exitcond_fu_236_p2 = (!i1_reg_132.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(i1_reg_132.read() == ap_const_lv4_A);
}

void softmax_forward::thread_grp_fu_143_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        grp_fu_143_p0 = softmax_output_load_reg_328.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_fu_143_p0 = storemerge_reg_108.read();
    } else {
        grp_fu_143_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void softmax_forward::thread_grp_fu_143_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        grp_fu_143_p1 = softmax_bias_load_reg_323.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_fu_143_p1 = tmp_8_reg_300.read();
    } else {
        grp_fu_143_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void softmax_forward::thread_i_2_fu_242_p2() {
    i_2_fu_242_p2 = (!i1_reg_132.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i1_reg_132.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void softmax_forward::thread_i_3_fu_164_p2() {
    i_3_fu_164_p2 = (!i_reg_97.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_reg_97.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void softmax_forward::thread_j_1_fu_185_p2() {
    j_1_fu_185_p2 = (!j_reg_121.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(j_reg_121.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void softmax_forward::thread_p_shl1_cast_fu_216_p1() {
    p_shl1_cast_fu_216_p1 = esl_zext<12,9>(tmp_6_fu_208_p3.read());
}

void softmax_forward::thread_p_shl_cast_fu_204_p1() {
    p_shl_cast_fu_204_p1 = esl_zext<12,11>(tmp_5_fu_196_p3.read());
}

void softmax_forward::thread_softmax_bias_address0() {
    softmax_bias_address0 =  (sc_lv<4>) (tmp_3_fu_248_p1.read());
}

void softmax_forward::thread_softmax_bias_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        softmax_bias_ce0 = ap_const_logic_1;
    } else {
        softmax_bias_ce0 = ap_const_logic_0;
    }
}

void softmax_forward::thread_softmax_kernel_address0() {
    softmax_kernel_address0 =  (sc_lv<11>) (tmp_11_cast_fu_231_p1.read());
}

void softmax_forward::thread_softmax_kernel_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        softmax_kernel_ce0 = ap_const_logic_1;
    } else {
        softmax_kernel_ce0 = ap_const_logic_0;
    }
}

void softmax_forward::thread_softmax_output_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        softmax_output_address0 = softmax_output_addr_1_reg_318.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        softmax_output_address0 =  (sc_lv<4>) (tmp_3_fu_248_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        softmax_output_address0 = softmax_output_addr_reg_267.read();
    } else {
        softmax_output_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void softmax_forward::thread_softmax_output_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()))) {
        softmax_output_ce0 = ap_const_logic_1;
    } else {
        softmax_output_ce0 = ap_const_logic_0;
    }
}

void softmax_forward::thread_softmax_output_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        softmax_output_d0 = reg_152.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        softmax_output_d0 = storemerge_reg_108.read();
    } else {
        softmax_output_d0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void softmax_forward::thread_softmax_output_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()))) {
        softmax_output_we0 = ap_const_logic_1;
    } else {
        softmax_output_we0 = ap_const_logic_0;
    }
}

void softmax_forward::thread_tmp_11_cast_fu_231_p1() {
    tmp_11_cast_fu_231_p1 = esl_zext<64,12>(tmp_1_fu_226_p2.read());
}

void softmax_forward::thread_tmp_1_fu_226_p2() {
    tmp_1_fu_226_p2 = (!tmp_s_fu_220_p2.read().is_01() || !tmp_cast_reg_262.read().is_01())? sc_lv<12>(): (sc_biguint<12>(tmp_s_fu_220_p2.read()) + sc_biguint<12>(tmp_cast_reg_262.read()));
}

void softmax_forward::thread_tmp_3_fu_248_p1() {
    tmp_3_fu_248_p1 = esl_zext<64,4>(i1_reg_132.read());
}

void softmax_forward::thread_tmp_5_fu_196_p3() {
    tmp_5_fu_196_p3 = esl_concat<8,3>(j_reg_121.read(), ap_const_lv3_0);
}

void softmax_forward::thread_tmp_6_fu_208_p3() {
    tmp_6_fu_208_p3 = esl_concat<8,1>(j_reg_121.read(), ap_const_lv1_0);
}

void softmax_forward::thread_tmp_7_fu_191_p1() {
    tmp_7_fu_191_p1 = esl_zext<64,8>(j_reg_121.read());
}

void softmax_forward::thread_tmp_cast_fu_175_p1() {
    tmp_cast_fu_175_p1 = esl_zext<12,4>(i_reg_97.read());
}

void softmax_forward::thread_tmp_fu_170_p1() {
    tmp_fu_170_p1 = esl_zext<64,4>(i_reg_97.read());
}

void softmax_forward::thread_tmp_s_fu_220_p2() {
    tmp_s_fu_220_p2 = (!p_shl1_cast_fu_216_p1.read().is_01() || !p_shl_cast_fu_204_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(p_shl1_cast_fu_216_p1.read()) + sc_biguint<12>(p_shl_cast_fu_204_p1.read()));
}

void softmax_forward::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond2_fu_158_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond1_fu_179_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(exitcond_fu_236_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<18>) ("XXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

