-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_forward is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    h_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    h_ce0 : OUT STD_LOGIC;
    h_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dense_output_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dense_output_ce0 : OUT STD_LOGIC;
    dense_output_we0 : OUT STD_LOGIC;
    dense_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dense_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dense_forward is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dense_kernel_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_kernel_ce0 : STD_LOGIC;
    signal dense_kernel_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_bias_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal dense_bias_ce0 : STD_LOGIC;
    signal dense_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_141_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_155 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal i_24_fu_167_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_24_reg_293 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_cast_fu_178_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_cast_reg_298 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond2_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dense_output_addr_reg_303 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_11_fu_188_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_11_reg_311 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond1_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dense_kernel_load_reg_326 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal h_load_reg_331 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_146_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_108_reg_336 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_25_fu_227_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_25_reg_344 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal exitcond_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dense_output_addr_1_reg_354 : STD_LOGIC_VECTOR (6 downto 0);
    signal dense_bias_load_reg_359 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal dense_output_load_reg_364 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_95 : STD_LOGIC_VECTOR (7 downto 0);
    signal storemerge1_reg_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_119 : STD_LOGIC_VECTOR (7 downto 0);
    signal i1_reg_130 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_fu_173_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_163_cast_fu_216_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_107_fu_194_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_105_fu_233_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal storemerge_fu_281_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_141_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_141_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_149_fu_199_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_162_cast_fu_207_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_151_fu_211_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_106_to_int_fu_239_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_145_fu_243_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_150_fu_253_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_147_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_148_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);

    component top_fadd_32ns_32nAem IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_fmul_32ns_32nBew IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_fcmp_32ns_32nEe0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dense_forward_denHfu IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dense_forward_denIfE IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    dense_kernel_U : component dense_forward_denHfu
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_kernel_address0,
        ce0 => dense_kernel_ce0,
        q0 => dense_kernel_q0);

    dense_bias_U : component dense_forward_denIfE
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_bias_address0,
        ce0 => dense_bias_ce0,
        q0 => dense_bias_q0);

    top_fadd_32ns_32nAem_U33 : component top_fadd_32ns_32nAem
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_141_p0,
        din1 => grp_fu_141_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_141_p2);

    top_fmul_32ns_32nBew_U34 : component top_fmul_32ns_32nBew
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => dense_kernel_load_reg_326,
        din1 => h_load_reg_331,
        ce => ap_const_logic_1,
        dout => grp_fu_146_p2);

    top_fcmp_32ns_32nEe0_U35 : component top_fcmp_32ns_32nEe0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => reg_155,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_4,
        dout => tmp_147_fu_150_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_161_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_reg_130 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                i1_reg_130 <= i_25_reg_344;
            end if; 
        end if;
    end process;

    i_reg_95_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_182_p2 = ap_const_lv1_1))) then 
                i_reg_95 <= i_24_reg_293;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_95 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    j_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                j_reg_119 <= j_11_reg_311;
            elsif (((exitcond2_fu_161_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_119 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    storemerge1_reg_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                storemerge1_reg_106 <= grp_fu_141_p2;
            elsif (((exitcond2_fu_161_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                storemerge1_reg_106 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                dense_bias_load_reg_359 <= dense_bias_q0;
                dense_output_load_reg_364 <= dense_output_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                dense_kernel_load_reg_326 <= dense_kernel_q0;
                h_load_reg_331 <= h_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_221_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                dense_output_addr_1_reg_354 <= tmp_105_fu_233_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_161_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                dense_output_addr_reg_303 <= tmp_fu_173_p1(7 - 1 downto 0);
                    tmp_cast_reg_298(7 downto 0) <= tmp_cast_fu_178_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_24_reg_293 <= i_24_fu_167_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                i_25_reg_344 <= i_25_fu_227_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_11_reg_311 <= j_11_fu_188_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
                reg_155 <= grp_fu_141_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_108_reg_336 <= grp_fu_146_p2;
            end if;
        end if;
    end process;
    tmp_cast_reg_298(15 downto 8) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond2_fu_161_p2, ap_CS_fsm_state3, exitcond1_fu_182_p2, ap_CS_fsm_state12, exitcond_fu_221_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond2_fu_161_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_182_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_221_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12, exitcond_fu_221_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_221_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_221_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_221_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    dense_bias_address0 <= tmp_105_fu_233_p1(7 - 1 downto 0);

    dense_bias_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            dense_bias_ce0 <= ap_const_logic_1;
        else 
            dense_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_kernel_address0 <= tmp_163_cast_fu_216_p1(14 - 1 downto 0);

    dense_kernel_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dense_kernel_ce0 <= ap_const_logic_1;
        else 
            dense_kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_output_address0_assign_proc : process(dense_output_addr_reg_303, ap_CS_fsm_state3, ap_CS_fsm_state12, dense_output_addr_1_reg_354, ap_CS_fsm_state18, tmp_105_fu_233_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            dense_output_address0 <= dense_output_addr_1_reg_354;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            dense_output_address0 <= tmp_105_fu_233_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dense_output_address0 <= dense_output_addr_reg_303;
        else 
            dense_output_address0 <= "XXXXXXX";
        end if; 
    end process;


    dense_output_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state12, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            dense_output_ce0 <= ap_const_logic_1;
        else 
            dense_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_output_d0_assign_proc : process(ap_CS_fsm_state3, storemerge1_reg_106, ap_CS_fsm_state18, storemerge_fu_281_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            dense_output_d0 <= storemerge_fu_281_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dense_output_d0 <= storemerge1_reg_106;
        else 
            dense_output_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dense_output_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            dense_output_we0 <= ap_const_logic_1;
        else 
            dense_output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_182_p2 <= "1" when (j_reg_119 = ap_const_lv8_80) else "0";
    exitcond2_fu_161_p2 <= "1" when (i_reg_95 = ap_const_lv8_80) else "0";
    exitcond_fu_221_p2 <= "1" when (i1_reg_130 = ap_const_lv8_80) else "0";

    grp_fu_141_p0_assign_proc : process(dense_output_load_reg_364, storemerge1_reg_106, ap_CS_fsm_state8, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_141_p0 <= dense_output_load_reg_364;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_141_p0 <= storemerge1_reg_106;
        else 
            grp_fu_141_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_141_p1_assign_proc : process(tmp_108_reg_336, dense_bias_load_reg_359, ap_CS_fsm_state8, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_141_p1 <= dense_bias_load_reg_359;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_141_p1 <= tmp_108_reg_336;
        else 
            grp_fu_141_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_address0 <= tmp_107_fu_194_p1(7 - 1 downto 0);

    h_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            h_ce0 <= ap_const_logic_1;
        else 
            h_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_24_fu_167_p2 <= std_logic_vector(unsigned(i_reg_95) + unsigned(ap_const_lv8_1));
    i_25_fu_227_p2 <= std_logic_vector(unsigned(i1_reg_130) + unsigned(ap_const_lv8_1));
    j_11_fu_188_p2 <= std_logic_vector(unsigned(j_reg_119) + unsigned(ap_const_lv8_1));
    notlhs_fu_257_p2 <= "0" when (tmp_145_fu_243_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_263_p2 <= "1" when (tmp_150_fu_253_p1 = ap_const_lv23_0) else "0";
    storemerge_fu_281_p3 <= 
        ap_const_lv32_0 when (tmp_148_fu_275_p2(0) = '1') else 
        reg_155;
    tmp_105_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_130),64));
    tmp_106_to_int_fu_239_p1 <= reg_155;
    tmp_107_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_119),64));
    tmp_145_fu_243_p4 <= tmp_106_to_int_fu_239_p1(30 downto 23);
    tmp_148_fu_275_p2 <= (tmp_s_fu_269_p2 and tmp_147_fu_150_p2);
    tmp_149_fu_199_p3 <= (j_reg_119 & ap_const_lv7_0);
    tmp_150_fu_253_p1 <= tmp_106_to_int_fu_239_p1(23 - 1 downto 0);
    tmp_151_fu_211_p2 <= std_logic_vector(unsigned(tmp_cast_reg_298) + unsigned(tmp_162_cast_fu_207_p1));
    tmp_162_cast_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_149_fu_199_p3),16));
    tmp_163_cast_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_151_fu_211_p2),64));
    tmp_cast_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_95),16));
    tmp_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_95),64));
    tmp_s_fu_269_p2 <= (notrhs_fu_263_p2 or notlhs_fu_257_p2);
end behav;
