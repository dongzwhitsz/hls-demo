-- ==============================================================
-- File generated on Mon Jul 15 22:03:00 +0800 2019
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2018.3 (64-bit)
-- SW Build 2405991 on Thu Dec  6 23:38:27 MST 2018
-- IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
-- Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity lstm_forward_onceg8j_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of lstm_forward_onceg8j_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100001010110011110100100110", 
    1 => "10111101010101101111101010000110", 
    2 => "10111100101111111001001010101000", 
    3 => "10111100101100110000100000111100", 
    4 => "10111101001101001011001011011001", 
    5 => "10111101001001011111111101011101", 
    6 => "10111010111101001000110001001000", 
    7 => "00111011110111110101100001001000", 
    8 => "10111100110001101110110011000001", 
    9 => "10111101101000110100111010101100", 
    10 => "00111101010011000101100101010101", 
    11 => "10111101011111001111111011011010", 
    12 => "10111100010001101001111110011100", 
    13 => "00111101110010110111110011111111", 
    14 => "10111101011000100001100111001111", 
    15 => "10111100101010010000110100111011", 
    16 => "10111100111101101010110100110010", 
    17 => "10111101100011010010101101100100", 
    18 => "10111101000110010011011010110100", 
    19 => "10111011100111001100101010010111", 
    20 => "10111101001000011100011111101100", 
    21 => "10111101001001100000011011000101", 
    22 => "10111101100000011011010111110111", 
    23 => "10111101000000000000010101010100", 
    24 => "00111100100110010011000101101111", 
    25 => "00111101100101011000011101001110", 
    26 => "10111101011000010000011110100000", 
    27 => "10111101001011001010000001000100", 
    28 => "10111100101011101111110001010010", 
    29 => "10111101011011101010101101101110", 
    30 => "00111100000100011010100010101001", 
    31 => "10111011001111011100000000001010", 
    32 => "10111101000110001011111001000101", 
    33 => "10111100101010111111010110100010", 
    34 => "00111100101011111010101010101110", 
    35 => "00111101010010110100110111111001", 
    36 => "10111101011010000100010000111110", 
    37 => "00111101011011101011111100111011", 
    38 => "00111011101101001101111100111001", 
    39 => "10111101001111110111100010011100", 
    40 => "00111101010110110000001110010111", 
    41 => "10111011100110000011010111100110", 
    42 => "10111100000010110000110111010101", 
    43 => "10111101010000100001110000110110", 
    44 => "10111101010111001111101110010011", 
    45 => "00111100011011000110101000100110", 
    46 => "00111100101111100101110100101100", 
    47 => "10111100011001011011111011011010", 
    48 => "10111101101010000101111110011100", 
    49 => "00111100110000101111100100100011", 
    50 => "10111100001001110110010000101000", 
    51 => "10111100010111000001101111111100", 
    52 => "10111011101011000011001101011011", 
    53 => "10111101000100011001001111001100", 
    54 => "10111101000111111110111011100011", 
    55 => "10111100110100010111110101000000", 
    56 => "10111011101000001010011101111100", 
    57 => "10111101100000110110001000111101", 
    58 => "10111100110100001101000101111111", 
    59 => "10111101100011100011111111011011", 
    60 => "00111011010110110111111100000001", 
    61 => "10111100010010101000101101100001", 
    62 => "10111101000010100011100011110010", 
    63 => "10111100111011001110110111011000", 
    64 => "10111100110010011110000001011110", 
    65 => "10111101001101110000110110011110", 
    66 => "10111101101010010000101010110101", 
    67 => "10111011100101010101001000010110", 
    68 => "10111100101011010000111111010000", 
    69 => "00111100001000010111101100011101", 
    70 => "00111101011110010000110001110010", 
    71 => "00111101000111101101100110111111", 
    72 => "10111100101111100001111000101010", 
    73 => "00111011111100100100001111011000", 
    74 => "10111101100010110100001101110010", 
    75 => "10111101100011001111000110011010", 
    76 => "10111101101000101100110010001100", 
    77 => "00111101001001111110101011010010", 
    78 => "10111101101001011011011111000011", 
    79 => "10111100111001000111010111110100", 
    80 => "00111001111101000111110100111101", 
    81 => "10111100011100111011010100000011", 
    82 => "00111100000110100100110111000011", 
    83 => "10111011000000110101111000110000", 
    84 => "10111110000000001010000111101011", 
    85 => "10111101001000011011100111001100", 
    86 => "10111100100011011110101110101000", 
    87 => "00111100101111101011111110101010", 
    88 => "10111101010111101001111001010011", 
    89 => "10111101101001000011011010000111", 
    90 => "10111100101100000111000001011100", 
    91 => "10111011101111100111001100000111", 
    92 => "00111100000111100111010101000111", 
    93 => "00111100110111001011111000001011", 
    94 => "10111101111100001000010010110010", 
    95 => "10111101100001001100001001100000", 
    96 => "00111011111100101001011010110100", 
    97 => "10111100010010110010000101100101", 
    98 => "00111100101010111110001110000000", 
    99 => "10111100011101110101001011011100", 
    100 => "10111011100001000111000010001010", 
    101 => "10111101010111111100100001110100", 
    102 => "10111100011001110000000011011111", 
    103 => "10111101001011000011001010101111", 
    104 => "00111001011011001101111011111000", 
    105 => "10111100011010010011001000000110", 
    106 => "10111101011110101011000100010110", 
    107 => "10111101001110010001100001101110", 
    108 => "10111100111001010011001011110111", 
    109 => "00111011010110110111001011100101", 
    110 => "10111100011000000001011010000011", 
    111 => "10111011101101110000101001011100", 
    112 => "10111101001110010110000010000001", 
    113 => "10111101010111101011100011101100", 
    114 => "10111101001100010011001110110001", 
    115 => "10111011011111110101010011000101", 
    116 => "10111100100011011011101100111100", 
    117 => "10111011111001110011001111110010", 
    118 => "10111101000011011001011100111011", 
    119 => "00111010100011111110001110100100", 
    120 => "10111100110101110000101111100111", 
    121 => "10111101000110111010011100101001", 
    122 => "10111101001101101101111111100101", 
    123 => "10111101010011101111111100100000", 
    124 => "00111100110101100010001111111011", 
    125 => "10111100100110001000000110011110", 
    126 => "10111100110110001100110111100010", 
    127 => "10111100100010100101000101000100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity lstm_forward_onceg8j is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of lstm_forward_onceg8j is
    component lstm_forward_onceg8j_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    lstm_forward_onceg8j_rom_U :  component lstm_forward_onceg8j_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


