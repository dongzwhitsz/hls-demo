-- ==============================================================
-- File generated on Mon Jul 15 22:02:58 +0800 2019
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2018.3 (64-bit)
-- SW Build 2405991 on Thu Dec  6 23:38:27 MST 2018
-- IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
-- Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity lstm_forward_oncedEe_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of lstm_forward_oncedEe_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111111011110110001101010110000", 
    1 => "00111111011101100111100101111010", 
    2 => "00111111100000111101110011110010", 
    3 => "00111111100000100011100011001001", 
    4 => "00111111011101111110100000010111", 
    5 => "00111111100001000111000001011000", 
    6 => "00111111100000111100110110011000", 
    7 => "00111111100001001100011100101100", 
    8 => "00111111100001010111011001101001", 
    9 => "00111111100001111100011001101100", 
    10 => "00111111011111101110111010011101", 
    11 => "00111111100000110001101101011001", 
    12 => "00111111011111000001101010100001", 
    13 => "00111111100000110011000111011000", 
    14 => "00111111100000100110010000110010", 
    15 => "00111111011100110000111111011110", 
    16 => "00111111011101100110001101111100", 
    17 => "00111111100001110110001100011110", 
    18 => "00111111100000011011100001010111", 
    19 => "00111111100001010000100111010100", 
    20 => "00111111011111100101000000001001", 
    21 => "00111111100000110111011110000011", 
    22 => "00111111100000010001111101011110", 
    23 => "00111111011111010000001111111001", 
    24 => "00111111011111111010001001100001", 
    25 => "00111111100000011110100111100101", 
    26 => "00111111100000000110001101101001", 
    27 => "00111111100000011101111111111110", 
    28 => "00111111100000011100110111011100", 
    29 => "00111111011101010101111011001111", 
    30 => "00111111011110011001000111001101", 
    31 => "00111111100010000110011100100000", 
    32 => "00111111100000000001011100110001", 
    33 => "00111111100000011011101110010110", 
    34 => "00111111011111001000110111010110", 
    35 => "00111111100000100100111000111010", 
    36 => "00111111011111101111000100001101", 
    37 => "00111111100000001111101001101100", 
    38 => "00111111100000111111001000001000", 
    39 => "00111111011110101100101101110000", 
    40 => "00111111100000011000001100011110", 
    41 => "00111111011101101101001011001101", 
    42 => "00111111100001010111101111100110", 
    43 => "00111111011101001011101101001011", 
    44 => "00111111100001010011000101010110", 
    45 => "00111111100000001100001000001001", 
    46 => "00111111011010101000111000111001", 
    47 => "00111111100000000110010001111001", 
    48 => "00111111100001000110100110101100", 
    49 => "00111111011111011001101000101011", 
    50 => "00111111100000010111011101000110", 
    51 => "00111111011110010011110001101100", 
    52 => "00111111100000100101011011011100", 
    53 => "00111111011111101001100000000000", 
    54 => "00111111100000001111000000011001", 
    55 => "00111111100000000010111000000110", 
    56 => "00111111100001010100101000111011", 
    57 => "00111111011111001110110111001110", 
    58 => "00111111100000011110101100011000", 
    59 => "00111111100000011010100010100111", 
    60 => "00111111100000000110001101000110", 
    61 => "00111111011111101101001001001000", 
    62 => "00111111100000001111010111110011", 
    63 => "00111111100010100101100010011001", 
    64 => "00111111011110011101110000101000", 
    65 => "00111111011101110010011010001001", 
    66 => "00111111100001101011101010100110", 
    67 => "00111111100010101001100101101111", 
    68 => "00111111100000010111101000010001", 
    69 => "00111111100000000100110101111011", 
    70 => "00111111011101110000100011001000", 
    71 => "00111111100000100101110100110111", 
    72 => "00111111100000011100111011010101", 
    73 => "00111111100000100001000100001001", 
    74 => "00111111100001000011010101100001", 
    75 => "00111111100000100010111000000010", 
    76 => "00111111011110111101111000011111", 
    77 => "00111111011011010011010001100001", 
    78 => "00111111100000100011110110001000", 
    79 => "00111111100001010000011000011001", 
    80 => "00111111011111011111010000001111", 
    81 => "00111111011110011110111101100010", 
    82 => "00111111011011110001111000101110", 
    83 => "00111111100000001110001111111111", 
    84 => "00111111100000100110000110100100", 
    85 => "00111111100010101110101101001101", 
    86 => "00111111100001110101001001111010", 
    87 => "00111111011111010100100011110100", 
    88 => "00111111011110111011100101000100", 
    89 => "00111111100001011001111101010001", 
    90 => "00111111100000001011001011111111", 
    91 => "00111111011100101110101000100110", 
    92 => "00111111100001011111100010100111", 
    93 => "00111111100001000011111110001010", 
    94 => "00111111100001110100000010101101", 
    95 => "00111111011110010110011010100010", 
    96 => "00111111100001010010000001000101", 
    97 => "00111111100000001101100101100101", 
    98 => "00111111100000000000010101110111", 
    99 => "00111111011111111001010010001001", 
    100 => "00111111100000000101100110100111", 
    101 => "00111111100000100000101001100001", 
    102 => "00111111100000000010001100110000", 
    103 => "00111111011010100110000000101011", 
    104 => "00111111100001011100001100111101", 
    105 => "00111111011111100010001011010001", 
    106 => "00111111011100001011110101110011", 
    107 => "00111111100001010000001011000011", 
    108 => "00111111100000101110101111010100", 
    109 => "00111111011101110101000001110011", 
    110 => "00111111100000111111001000111000", 
    111 => "00111111011101000000001000000101", 
    112 => "00111111100000011010010010111101", 
    113 => "00111111011110100011000010100011", 
    114 => "00111111011110011001111000000011", 
    115 => "00111111011101011010011101100010", 
    116 => "00111111100000010101010010110110", 
    117 => "00111111011110101101001001011110", 
    118 => "00111111011110111111010111011111", 
    119 => "00111111100000101111010001010111", 
    120 => "00111111100000000111000010100011", 
    121 => "00111111011111010100110101111101", 
    122 => "00111111100001000001110000111101", 
    123 => "00111111011101110001100001000100", 
    124 => "00111111011111100100100111101011", 
    125 => "00111111100000100110100001001100", 
    126 => "00111111100001011011101010111101", 
    127 => "00111111011100100110000110100001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity lstm_forward_oncedEe is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of lstm_forward_oncedEe is
    component lstm_forward_oncedEe_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    lstm_forward_oncedEe_rom_U :  component lstm_forward_oncedEe_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


