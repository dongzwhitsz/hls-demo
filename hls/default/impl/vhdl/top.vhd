-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    img_ce0 : OUT STD_LOGIC;
    img_we0 : OUT STD_LOGIC;
    img_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    img_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "top,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-3,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.354450,HLS_SYN_LAT=23080057,HLS_SYN_TPT=none,HLS_SYN_MEM=217,HLS_SYN_DSP=43,HLS_SYN_FF=6246,HLS_SYN_LUT=12011,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv64_BFF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_3F80000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111110000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal c_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_ce0 : STD_LOGIC;
    signal c_we0 : STD_LOGIC;
    signal c_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal h_ce0 : STD_LOGIC;
    signal h_we0 : STD_LOGIC;
    signal h_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_output_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal dense_output_ce0 : STD_LOGIC;
    signal dense_output_we0 : STD_LOGIC;
    signal dense_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal softmax_output_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal softmax_output_ce0 : STD_LOGIC;
    signal softmax_output_we0 : STD_LOGIC;
    signal softmax_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_fu_304_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_3_reg_416 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_3_fu_334_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_reg_421 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond1_i_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_346_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_429 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal img_addr_reg_434 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_i_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_105_i_fu_284_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_105_i_reg_439 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_293_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_106_i_reg_444 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_288_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_107_i_reg_449 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal i_2_fu_372_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal i_4_fu_390_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_4_reg_465 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal i_1_fu_402_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_473 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_fu_408_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_478 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_lstm_forward_once_fu_220_ap_start : STD_LOGIC;
    signal grp_lstm_forward_once_fu_220_ap_done : STD_LOGIC;
    signal grp_lstm_forward_once_fu_220_ap_idle : STD_LOGIC;
    signal grp_lstm_forward_once_fu_220_ap_ready : STD_LOGIC;
    signal grp_lstm_forward_once_fu_220_img_line_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_lstm_forward_once_fu_220_img_line_ce0 : STD_LOGIC;
    signal grp_lstm_forward_once_fu_220_h_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_lstm_forward_once_fu_220_h_ce0 : STD_LOGIC;
    signal grp_lstm_forward_once_fu_220_h_we0 : STD_LOGIC;
    signal grp_lstm_forward_once_fu_220_h_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_lstm_forward_once_fu_220_c_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_lstm_forward_once_fu_220_c_ce0 : STD_LOGIC;
    signal grp_lstm_forward_once_fu_220_c_we0 : STD_LOGIC;
    signal grp_lstm_forward_once_fu_220_c_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dense_forward_fu_256_ap_start : STD_LOGIC;
    signal grp_dense_forward_fu_256_ap_done : STD_LOGIC;
    signal grp_dense_forward_fu_256_ap_idle : STD_LOGIC;
    signal grp_dense_forward_fu_256_ap_ready : STD_LOGIC;
    signal grp_dense_forward_fu_256_h_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_dense_forward_fu_256_h_ce0 : STD_LOGIC;
    signal grp_dense_forward_fu_256_dense_output_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_dense_forward_fu_256_dense_output_ce0 : STD_LOGIC;
    signal grp_dense_forward_fu_256_dense_output_we0 : STD_LOGIC;
    signal grp_dense_forward_fu_256_dense_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_softmax_forward_fu_268_ap_start : STD_LOGIC;
    signal grp_softmax_forward_fu_268_ap_done : STD_LOGIC;
    signal grp_softmax_forward_fu_268_ap_idle : STD_LOGIC;
    signal grp_softmax_forward_fu_268_ap_ready : STD_LOGIC;
    signal grp_softmax_forward_fu_268_dense_output_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_softmax_forward_fu_268_dense_output_ce0 : STD_LOGIC;
    signal grp_softmax_forward_fu_268_softmax_output_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_softmax_forward_fu_268_softmax_output_ce0 : STD_LOGIC;
    signal grp_softmax_forward_fu_268_softmax_output_we0 : STD_LOGIC;
    signal grp_softmax_forward_fu_268_softmax_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_reg_164 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_i_reg_175 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal i_i3_reg_186 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond1_i4_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_i_reg_197 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal i_reg_209 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_lstm_forward_once_fu_220_ap_start_reg : STD_LOGIC := '0';
    signal exitcond_i6_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dense_forward_fu_256_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_softmax_forward_fu_268_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_4_cast_fu_361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i5_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_108_i_fu_280_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_1_fu_310_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_322_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_318_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_330_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_cast_fu_352_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_fu_356_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);

    component lstm_forward_once IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_line_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        img_line_ce0 : OUT STD_LOGIC;
        img_line_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        img_line_offset : IN STD_LOGIC_VECTOR (4 downto 0);
        h_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        h_ce0 : OUT STD_LOGIC;
        h_we0 : OUT STD_LOGIC;
        h_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        h_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        c_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        c_ce0 : OUT STD_LOGIC;
        c_we0 : OUT STD_LOGIC;
        c_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dense_forward IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        h_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        h_ce0 : OUT STD_LOGIC;
        h_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dense_output_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        dense_output_ce0 : OUT STD_LOGIC;
        dense_output_we0 : OUT STD_LOGIC;
        dense_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dense_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component softmax_forward IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dense_output_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        dense_output_ce0 : OUT STD_LOGIC;
        dense_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        softmax_output_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        softmax_output_ce0 : OUT STD_LOGIC;
        softmax_output_we0 : OUT STD_LOGIC;
        softmax_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        softmax_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_fptrunc_64ns_CeG IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_fpext_32ns_64DeQ IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component top_dadd_64ns_64nFfa IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component top_dmul_64ns_64nGfk IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component top_c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_softmax_output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    c_U : component top_c
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_address0,
        ce0 => c_ce0,
        we0 => c_we0,
        d0 => c_d0,
        q0 => c_q0);

    h_U : component top_c
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => h_address0,
        ce0 => h_ce0,
        we0 => h_we0,
        d0 => h_d0,
        q0 => h_q0);

    dense_output_U : component top_c
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_output_address0,
        ce0 => dense_output_ce0,
        we0 => dense_output_we0,
        d0 => grp_dense_forward_fu_256_dense_output_d0,
        q0 => dense_output_q0);

    softmax_output_U : component top_softmax_output
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => softmax_output_address0,
        ce0 => softmax_output_ce0,
        we0 => softmax_output_we0,
        d0 => grp_softmax_forward_fu_268_softmax_output_d0,
        q0 => softmax_output_q0);

    grp_lstm_forward_once_fu_220 : component lstm_forward_once
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_lstm_forward_once_fu_220_ap_start,
        ap_done => grp_lstm_forward_once_fu_220_ap_done,
        ap_idle => grp_lstm_forward_once_fu_220_ap_idle,
        ap_ready => grp_lstm_forward_once_fu_220_ap_ready,
        img_line_address0 => grp_lstm_forward_once_fu_220_img_line_address0,
        img_line_ce0 => grp_lstm_forward_once_fu_220_img_line_ce0,
        img_line_q0 => img_q0,
        img_line_offset => i1_i_reg_197,
        h_address0 => grp_lstm_forward_once_fu_220_h_address0,
        h_ce0 => grp_lstm_forward_once_fu_220_h_ce0,
        h_we0 => grp_lstm_forward_once_fu_220_h_we0,
        h_d0 => grp_lstm_forward_once_fu_220_h_d0,
        h_q0 => h_q0,
        c_address0 => grp_lstm_forward_once_fu_220_c_address0,
        c_ce0 => grp_lstm_forward_once_fu_220_c_ce0,
        c_we0 => grp_lstm_forward_once_fu_220_c_we0,
        c_d0 => grp_lstm_forward_once_fu_220_c_d0,
        c_q0 => c_q0);

    grp_dense_forward_fu_256 : component dense_forward
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dense_forward_fu_256_ap_start,
        ap_done => grp_dense_forward_fu_256_ap_done,
        ap_idle => grp_dense_forward_fu_256_ap_idle,
        ap_ready => grp_dense_forward_fu_256_ap_ready,
        h_address0 => grp_dense_forward_fu_256_h_address0,
        h_ce0 => grp_dense_forward_fu_256_h_ce0,
        h_q0 => h_q0,
        dense_output_address0 => grp_dense_forward_fu_256_dense_output_address0,
        dense_output_ce0 => grp_dense_forward_fu_256_dense_output_ce0,
        dense_output_we0 => grp_dense_forward_fu_256_dense_output_we0,
        dense_output_d0 => grp_dense_forward_fu_256_dense_output_d0,
        dense_output_q0 => dense_output_q0);

    grp_softmax_forward_fu_268 : component softmax_forward
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_softmax_forward_fu_268_ap_start,
        ap_done => grp_softmax_forward_fu_268_ap_done,
        ap_idle => grp_softmax_forward_fu_268_ap_idle,
        ap_ready => grp_softmax_forward_fu_268_ap_ready,
        dense_output_address0 => grp_softmax_forward_fu_268_dense_output_address0,
        dense_output_ce0 => grp_softmax_forward_fu_268_dense_output_ce0,
        dense_output_q0 => dense_output_q0,
        softmax_output_address0 => grp_softmax_forward_fu_268_softmax_output_address0,
        softmax_output_ce0 => grp_softmax_forward_fu_268_softmax_output_ce0,
        softmax_output_we0 => grp_softmax_forward_fu_268_softmax_output_we0,
        softmax_output_d0 => grp_softmax_forward_fu_268_softmax_output_d0,
        softmax_output_q0 => softmax_output_q0);

    top_fptrunc_64ns_CeG_U46 : component top_fptrunc_64ns_CeG
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_107_i_reg_449,
        dout => tmp_108_i_fu_280_p1);

    top_fpext_32ns_64DeQ_U47 : component top_fpext_32ns_64DeQ
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => img_q0,
        dout => tmp_105_i_fu_284_p1);

    top_dadd_64ns_64nFfa_U48 : component top_dadd_64ns_64nFfa
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_106_i_reg_444,
        din1 => ap_const_lv64_BFF0000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_288_p2);

    top_dmul_64ns_64nGfk_U49 : component top_dmul_64ns_64nGfk
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_105_i_reg_439,
        din1 => ap_const_lv64_3F80000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_293_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_dense_forward_fu_256_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dense_forward_fu_256_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond_i6_fu_384_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                    grp_dense_forward_fu_256_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dense_forward_fu_256_ap_ready = ap_const_logic_1)) then 
                    grp_dense_forward_fu_256_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_lstm_forward_once_fu_220_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_lstm_forward_once_fu_220_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond_i6_fu_384_p2 = ap_const_lv1_0))) then 
                    grp_lstm_forward_once_fu_220_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_lstm_forward_once_fu_220_ap_ready = ap_const_logic_1)) then 
                    grp_lstm_forward_once_fu_220_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_softmax_forward_fu_268_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_softmax_forward_fu_268_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    grp_softmax_forward_fu_268_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_softmax_forward_fu_268_ap_ready = ap_const_logic_1)) then 
                    grp_softmax_forward_fu_268_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_i_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i4_fu_366_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                i1_i_reg_197 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (grp_lstm_forward_once_fu_220_ap_done = ap_const_logic_1))) then 
                i1_i_reg_197 <= i_4_reg_465;
            end if; 
        end if;
    end process;

    i_i3_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_i_fu_298_p2 = ap_const_lv1_1))) then 
                i_i3_reg_186 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond1_i4_fu_366_p2 = ap_const_lv1_0))) then 
                i_i3_reg_186 <= i_2_fu_372_p2;
            end if; 
        end if;
    end process;

    i_i_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_i_fu_340_p2 = ap_const_lv1_1))) then 
                i_i_reg_164 <= i_3_reg_416;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_i_reg_164 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                i_reg_209 <= i_1_reg_473;
            elsif (((grp_softmax_forward_fu_268_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                i_reg_209 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_i_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_i_fu_298_p2 = ap_const_lv1_0))) then 
                j_i_reg_175 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                j_i_reg_175 <= j_reg_429;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                i_1_reg_473 <= i_1_fu_402_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_3_reg_416 <= i_3_fu_304_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                i_4_reg_465 <= i_4_fu_390_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_i_fu_340_p2 = ap_const_lv1_0))) then
                img_addr_reg_434 <= tmp_4_cast_fu_361_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_429 <= j_fu_346_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_105_i_reg_439 <= tmp_105_i_fu_284_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_106_i_reg_444 <= grp_fu_293_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_107_i_reg_449 <= grp_fu_288_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_i_fu_298_p2 = ap_const_lv1_0))) then
                    tmp_3_reg_421(10 downto 2) <= tmp_3_fu_334_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (exitcond_fu_396_p2 = ap_const_lv1_0))) then
                    tmp_reg_478(3 downto 0) <= tmp_fu_408_p1(3 downto 0);
            end if;
        end if;
    end process;
    tmp_3_reg_421(1 downto 0) <= "00";
    tmp_reg_478(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_i_fu_298_p2, ap_CS_fsm_state3, exitcond_i_fu_340_p2, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state22, exitcond_fu_396_p2, grp_lstm_forward_once_fu_220_ap_done, grp_dense_forward_fu_256_ap_done, grp_softmax_forward_fu_268_ap_done, exitcond1_i4_fu_366_p2, ap_CS_fsm_state18, ap_CS_fsm_state21, exitcond_i6_fu_384_p2, ap_CS_fsm_state19)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_i_fu_298_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_i_fu_340_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state16 => 
                if (((exitcond1_i4_fu_366_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((exitcond_i6_fu_384_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (grp_lstm_forward_once_fu_220_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_dense_forward_fu_256_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((grp_softmax_forward_fu_268_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (exitcond_fu_396_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state22, exitcond_fu_396_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) and (exitcond_fu_396_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state22, exitcond_fu_396_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) and (exitcond_fu_396_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    c_address0_assign_proc : process(ap_CS_fsm_state16, grp_lstm_forward_once_fu_220_c_address0, ap_CS_fsm_state18, tmp_i5_fu_378_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            c_address0 <= tmp_i5_fu_378_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            c_address0 <= grp_lstm_forward_once_fu_220_c_address0;
        else 
            c_address0 <= "XXXXXXX";
        end if; 
    end process;


    c_ce0_assign_proc : process(ap_CS_fsm_state16, grp_lstm_forward_once_fu_220_c_ce0, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            c_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            c_ce0 <= grp_lstm_forward_once_fu_220_c_ce0;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_d0_assign_proc : process(ap_CS_fsm_state16, grp_lstm_forward_once_fu_220_c_d0, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            c_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            c_d0 <= grp_lstm_forward_once_fu_220_c_d0;
        else 
            c_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    c_we0_assign_proc : process(ap_CS_fsm_state16, grp_lstm_forward_once_fu_220_c_we0, exitcond1_i4_fu_366_p2, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond1_i4_fu_366_p2 = ap_const_lv1_0))) then 
            c_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            c_we0 <= grp_lstm_forward_once_fu_220_c_we0;
        else 
            c_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_output_address0_assign_proc : process(grp_dense_forward_fu_256_dense_output_address0, grp_softmax_forward_fu_268_dense_output_address0, ap_CS_fsm_state21, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            dense_output_address0 <= grp_softmax_forward_fu_268_dense_output_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            dense_output_address0 <= grp_dense_forward_fu_256_dense_output_address0;
        else 
            dense_output_address0 <= "XXXXXXX";
        end if; 
    end process;


    dense_output_ce0_assign_proc : process(grp_dense_forward_fu_256_dense_output_ce0, grp_softmax_forward_fu_268_dense_output_ce0, ap_CS_fsm_state21, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            dense_output_ce0 <= grp_softmax_forward_fu_268_dense_output_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            dense_output_ce0 <= grp_dense_forward_fu_256_dense_output_ce0;
        else 
            dense_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_output_we0_assign_proc : process(grp_dense_forward_fu_256_dense_output_we0, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            dense_output_we0 <= grp_dense_forward_fu_256_dense_output_we0;
        else 
            dense_output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_i4_fu_366_p2 <= "1" when (i_i3_reg_186 = ap_const_lv8_80) else "0";
    exitcond1_i_fu_298_p2 <= "1" when (i_i_reg_164 = ap_const_lv5_1C) else "0";
    exitcond_fu_396_p2 <= "1" when (i_reg_209 = ap_const_lv4_A) else "0";
    exitcond_i6_fu_384_p2 <= "1" when (i1_i_reg_197 = ap_const_lv5_1C) else "0";
    exitcond_i_fu_340_p2 <= "1" when (j_i_reg_175 = ap_const_lv5_1C) else "0";
    grp_dense_forward_fu_256_ap_start <= grp_dense_forward_fu_256_ap_start_reg;
    grp_lstm_forward_once_fu_220_ap_start <= grp_lstm_forward_once_fu_220_ap_start_reg;
    grp_softmax_forward_fu_268_ap_start <= grp_softmax_forward_fu_268_ap_start_reg;

    h_address0_assign_proc : process(ap_CS_fsm_state16, grp_lstm_forward_once_fu_220_h_address0, grp_dense_forward_fu_256_h_address0, ap_CS_fsm_state18, ap_CS_fsm_state19, tmp_i5_fu_378_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            h_address0 <= tmp_i5_fu_378_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            h_address0 <= grp_dense_forward_fu_256_h_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            h_address0 <= grp_lstm_forward_once_fu_220_h_address0;
        else 
            h_address0 <= "XXXXXXX";
        end if; 
    end process;


    h_ce0_assign_proc : process(ap_CS_fsm_state16, grp_lstm_forward_once_fu_220_h_ce0, grp_dense_forward_fu_256_h_ce0, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            h_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            h_ce0 <= grp_dense_forward_fu_256_h_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            h_ce0 <= grp_lstm_forward_once_fu_220_h_ce0;
        else 
            h_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    h_d0_assign_proc : process(ap_CS_fsm_state16, grp_lstm_forward_once_fu_220_h_d0, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            h_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            h_d0 <= grp_lstm_forward_once_fu_220_h_d0;
        else 
            h_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    h_we0_assign_proc : process(ap_CS_fsm_state16, grp_lstm_forward_once_fu_220_h_we0, exitcond1_i4_fu_366_p2, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond1_i4_fu_366_p2 = ap_const_lv1_0))) then 
            h_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            h_we0 <= grp_lstm_forward_once_fu_220_h_we0;
        else 
            h_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_402_p2 <= std_logic_vector(unsigned(i_reg_209) + unsigned(ap_const_lv4_1));
    i_2_fu_372_p2 <= std_logic_vector(unsigned(i_i3_reg_186) + unsigned(ap_const_lv8_1));
    i_3_fu_304_p2 <= std_logic_vector(unsigned(i_i_reg_164) + unsigned(ap_const_lv5_1));
    i_4_fu_390_p2 <= std_logic_vector(unsigned(i1_i_reg_197) + unsigned(ap_const_lv5_1));

    img_address0_assign_proc : process(ap_CS_fsm_state3, img_addr_reg_434, grp_lstm_forward_once_fu_220_img_line_address0, ap_CS_fsm_state15, ap_CS_fsm_state18, tmp_4_cast_fu_361_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            img_address0 <= img_addr_reg_434;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            img_address0 <= tmp_4_cast_fu_361_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            img_address0 <= grp_lstm_forward_once_fu_220_img_line_address0;
        else 
            img_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    img_ce0_assign_proc : process(ap_CS_fsm_state3, grp_lstm_forward_once_fu_220_img_line_ce0, ap_CS_fsm_state15, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            img_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            img_ce0 <= grp_lstm_forward_once_fu_220_img_line_ce0;
        else 
            img_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    img_d0 <= tmp_108_i_fu_280_p1;

    img_we0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            img_we0 <= ap_const_logic_1;
        else 
            img_we0 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_346_p2 <= std_logic_vector(unsigned(j_i_reg_175) + unsigned(ap_const_lv5_1));
    output_r_address0 <= tmp_reg_478(4 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= softmax_output_q0;

    output_r_we0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_322_p3),11));
    p_shl_cast_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_310_p3),11));

    softmax_output_address0_assign_proc : process(ap_CS_fsm_state22, tmp_fu_408_p1, grp_softmax_forward_fu_268_softmax_output_address0, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            softmax_output_address0 <= tmp_fu_408_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            softmax_output_address0 <= grp_softmax_forward_fu_268_softmax_output_address0;
        else 
            softmax_output_address0 <= "XXXX";
        end if; 
    end process;


    softmax_output_ce0_assign_proc : process(ap_CS_fsm_state22, grp_softmax_forward_fu_268_softmax_output_ce0, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            softmax_output_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            softmax_output_ce0 <= grp_softmax_forward_fu_268_softmax_output_ce0;
        else 
            softmax_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    softmax_output_we0_assign_proc : process(grp_softmax_forward_fu_268_softmax_output_we0, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            softmax_output_we0 <= grp_softmax_forward_fu_268_softmax_output_we0;
        else 
            softmax_output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_310_p3 <= (i_i_reg_164 & ap_const_lv5_0);
    tmp_2_fu_322_p3 <= (i_i_reg_164 & ap_const_lv2_0);
    tmp_3_fu_334_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_318_p1) - unsigned(p_shl1_cast_fu_330_p1));
        tmp_4_cast_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_fu_356_p2),64));

    tmp_4_fu_356_p2 <= std_logic_vector(unsigned(tmp_3_reg_421) + unsigned(tmp_i_cast_fu_352_p1));
    tmp_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_209),64));
    tmp_i5_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i3_reg_186),64));
    tmp_i_cast_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i_reg_175),11));
end behav;
