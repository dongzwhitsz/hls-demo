// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_forward (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dense_output_address0,
        dense_output_ce0,
        dense_output_q0,
        softmax_output_address0,
        softmax_output_ce0,
        softmax_output_we0,
        softmax_output_d0,
        softmax_output_q0
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_state15 = 18'd16384;
parameter    ap_ST_fsm_state16 = 18'd32768;
parameter    ap_ST_fsm_state17 = 18'd65536;
parameter    ap_ST_fsm_state18 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] dense_output_address0;
output   dense_output_ce0;
input  [31:0] dense_output_q0;
output  [3:0] softmax_output_address0;
output   softmax_output_ce0;
output   softmax_output_we0;
output  [31:0] softmax_output_d0;
input  [31:0] softmax_output_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg dense_output_ce0;
reg[3:0] softmax_output_address0;
reg softmax_output_ce0;
reg softmax_output_we0;
reg[31:0] softmax_output_d0;

(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [10:0] softmax_kernel_address0;
reg    softmax_kernel_ce0;
wire   [31:0] softmax_kernel_q0;
wire   [3:0] softmax_bias_address0;
reg    softmax_bias_ce0;
wire   [31:0] softmax_bias_q0;
wire   [31:0] grp_fu_149_p2;
reg   [31:0] reg_158;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state17;
wire   [3:0] i_3_fu_170_p2;
reg   [3:0] i_3_reg_263;
wire    ap_CS_fsm_state2;
wire   [11:0] tmp_cast_fu_181_p1;
reg   [11:0] tmp_cast_reg_268;
wire   [0:0] exitcond2_fu_164_p2;
reg   [3:0] softmax_output_addr_reg_273;
wire   [7:0] j_1_fu_191_p2;
reg   [7:0] j_1_reg_281;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond1_fu_185_p2;
reg   [31:0] softmax_kernel_load_reg_296;
wire    ap_CS_fsm_state4;
reg   [31:0] dense_output_load_reg_301;
wire   [31:0] grp_fu_154_p2;
reg   [31:0] tmp_8_reg_306;
wire    ap_CS_fsm_state7;
wire   [3:0] i_2_fu_248_p2;
reg   [3:0] i_2_reg_314;
wire    ap_CS_fsm_state12;
wire   [0:0] exitcond_fu_242_p2;
reg   [3:0] softmax_output_addr_1_reg_324;
reg   [31:0] softmax_bias_load_reg_329;
wire    ap_CS_fsm_state13;
reg   [31:0] softmax_output_load_reg_334;
reg   [3:0] i_reg_103;
reg   [31:0] storemerge_reg_114;
reg   [7:0] j_reg_127;
reg   [3:0] i1_reg_138;
wire    ap_CS_fsm_state18;
wire   [63:0] tmp_fu_176_p1;
wire   [63:0] tmp_12_cast_fu_237_p1;
wire   [63:0] tmp_7_fu_197_p1;
wire   [63:0] tmp_3_fu_254_p1;
reg   [31:0] grp_fu_149_p0;
reg   [31:0] grp_fu_149_p1;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state5;
wire   [10:0] tmp_6_fu_202_p3;
wire   [8:0] tmp_s_fu_214_p3;
wire   [11:0] p_shl1_cast_fu_222_p1;
wire   [11:0] p_shl_cast_fu_210_p1;
wire   [11:0] tmp_1_fu_226_p2;
wire   [11:0] tmp_2_fu_232_p2;
reg   [17:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
end

softmax_forward_sJfO #(
    .DataWidth( 32 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
softmax_kernel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(softmax_kernel_address0),
    .ce0(softmax_kernel_ce0),
    .q0(softmax_kernel_q0)
);

softmax_forward_sKfY #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
softmax_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(softmax_bias_address0),
    .ce0(softmax_bias_ce0),
    .q0(softmax_bias_q0)
);

top_fadd_32ns_32nAem #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_fadd_32ns_32nAem_U47(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_149_p0),
    .din1(grp_fu_149_p1),
    .ce(1'b1),
    .dout(grp_fu_149_p2)
);

top_fmul_32ns_32nBew #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_fmul_32ns_32nBew_U48(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(softmax_kernel_load_reg_296),
    .din1(dense_output_load_reg_301),
    .ce(1'b1),
    .dout(grp_fu_154_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_164_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_reg_138 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        i1_reg_138 <= i_2_reg_314;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_185_p2 == 1'd1))) begin
        i_reg_103 <= i_3_reg_263;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_103 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_reg_127 <= j_1_reg_281;
    end else if (((exitcond2_fu_164_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_127 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        storemerge_reg_114 <= grp_fu_149_p2;
    end else if (((exitcond2_fu_164_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        storemerge_reg_114 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        dense_output_load_reg_301 <= dense_output_q0;
        softmax_kernel_load_reg_296 <= softmax_kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_2_reg_314 <= i_2_fu_248_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_3_reg_263 <= i_3_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_1_reg_281 <= j_1_fu_191_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_158 <= grp_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        softmax_bias_load_reg_329 <= softmax_bias_q0;
        softmax_output_load_reg_334 <= softmax_output_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        softmax_output_addr_1_reg_324 <= tmp_3_fu_254_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_164_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        softmax_output_addr_reg_273 <= tmp_fu_176_p1;
        tmp_cast_reg_268[3 : 0] <= tmp_cast_fu_181_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_8_reg_306 <= grp_fu_154_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_242_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_242_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dense_output_ce0 = 1'b1;
    end else begin
        dense_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_149_p0 = softmax_output_load_reg_334;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_149_p0 = storemerge_reg_114;
    end else begin
        grp_fu_149_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_149_p1 = softmax_bias_load_reg_329;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_149_p1 = tmp_8_reg_306;
    end else begin
        grp_fu_149_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        softmax_bias_ce0 = 1'b1;
    end else begin
        softmax_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        softmax_kernel_ce0 = 1'b1;
    end else begin
        softmax_kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        softmax_output_address0 = softmax_output_addr_1_reg_324;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        softmax_output_address0 = tmp_3_fu_254_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        softmax_output_address0 = softmax_output_addr_reg_273;
    end else begin
        softmax_output_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state12))) begin
        softmax_output_ce0 = 1'b1;
    end else begin
        softmax_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        softmax_output_d0 = reg_158;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        softmax_output_d0 = storemerge_reg_114;
    end else begin
        softmax_output_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state18))) begin
        softmax_output_we0 = 1'b1;
    end else begin
        softmax_output_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond2_fu_164_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_185_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_242_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign dense_output_address0 = tmp_7_fu_197_p1;

assign exitcond1_fu_185_p2 = ((j_reg_127 == 8'd128) ? 1'b1 : 1'b0);

assign exitcond2_fu_164_p2 = ((i_reg_103 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond_fu_242_p2 = ((i1_reg_138 == 4'd10) ? 1'b1 : 1'b0);

assign i_2_fu_248_p2 = (i1_reg_138 + 4'd1);

assign i_3_fu_170_p2 = (i_reg_103 + 4'd1);

assign j_1_fu_191_p2 = (j_reg_127 + 8'd1);

assign p_shl1_cast_fu_222_p1 = tmp_s_fu_214_p3;

assign p_shl_cast_fu_210_p1 = tmp_6_fu_202_p3;

assign softmax_bias_address0 = tmp_3_fu_254_p1;

assign softmax_kernel_address0 = tmp_12_cast_fu_237_p1;

assign tmp_12_cast_fu_237_p1 = tmp_2_fu_232_p2;

assign tmp_1_fu_226_p2 = (p_shl1_cast_fu_222_p1 + p_shl_cast_fu_210_p1);

assign tmp_2_fu_232_p2 = (tmp_1_fu_226_p2 + tmp_cast_reg_268);

assign tmp_3_fu_254_p1 = i1_reg_138;

assign tmp_6_fu_202_p3 = {{j_reg_127}, {3'd0}};

assign tmp_7_fu_197_p1 = j_reg_127;

assign tmp_cast_fu_181_p1 = i_reg_103;

assign tmp_fu_176_p1 = i_reg_103;

assign tmp_s_fu_214_p3 = {{j_reg_127}, {1'd0}};

always @ (posedge ap_clk) begin
    tmp_cast_reg_268[11:4] <= 8'b00000000;
end

endmodule //softmax_forward
