-- ==============================================================
-- File generated on Mon Jul 15 22:20:04 +0800 2019
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2018.3 (64-bit)
-- SW Build 2405991 on Thu Dec  6 23:38:27 MST 2018
-- IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
-- Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity lstm_forward_oncemb6_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of lstm_forward_oncemb6_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100110001010000101011100100", 
    1 => "10111011010101001011010111101100", 
    2 => "00111100110100110000001111101010", 
    3 => "10111011001010010000111111010011", 
    4 => "00111100011101001011010000001010", 
    5 => "10111011101101101111110111010011", 
    6 => "00111100101101010010001101110100", 
    7 => "00111101101110001011001010100011", 
    8 => "00111101011110101010011110100100", 
    9 => "00111101101010100111101011110000", 
    10 => "00111110001010100111001111001100", 
    11 => "00111101000100001101110010010000", 
    12 => "00111101110010110010110001001111", 
    13 => "00111101111100110000111011110111", 
    14 => "10111100111011111100000101110101", 
    15 => "00111101001000111001110010100011", 
    16 => "00111101110000100111011010100000", 
    17 => "00111011110001110001010001101101", 
    18 => "10111100101010011001111011000010", 
    19 => "00111100010111110001000010111000", 
    20 => "00111101010000101111010110111101", 
    21 => "00111100111110101100110110111001", 
    22 => "00111101010101101001100011000010", 
    23 => "00111101110000101011001111110110", 
    24 => "00111110001010111000111110011100", 
    25 => "00111101100111101010110011100101", 
    26 => "00111100100101000101001100100011", 
    27 => "00111101100010000110011011111010", 
    28 => "10111100100001101011100010010100", 
    29 => "10111101000111001101111101000010", 
    30 => "00111101010000100001110111000011", 
    31 => "00111100110101000000110001011001", 
    32 => "00111011011000010010001010000001", 
    33 => "00111101100000111110101100011111", 
    34 => "00111011010111010110001100110010", 
    35 => "00111101100101001111011001101011", 
    36 => "10111100100101000000111111001110", 
    37 => "00111100101010010000101010101100", 
    38 => "00111101100101111111100000101000", 
    39 => "10111011110011000100100101010101", 
    40 => "00111101011111000000001011101010", 
    41 => "00111011010101010000111100100000", 
    42 => "00111101111110110001101000000111", 
    43 => "00111100001010100001001101110101", 
    44 => "10111101000001110010100101000010", 
    45 => "00111100100001010000101010000001", 
    46 => "00111010011111110100100010101000", 
    47 => "10111011100010100100001100001010", 
    48 => "00111101001001111011101100101111", 
    49 => "00111101010101011001010111010110", 
    50 => "00111101000100111011001111010111", 
    51 => "00111110001010100010101011001011", 
    52 => "00111101010010011011100110010100", 
    53 => "00111100101010101001100001010000", 
    54 => "00111100001101101010111101010010", 
    55 => "00111101011101010111000000011010", 
    56 => "00111101001010110001110000111100", 
    57 => "00111101011000100101011100100100", 
    58 => "00111101000101010000010011101101", 
    59 => "00111011000101111000011001111000", 
    60 => "00111101110001111100111000111100", 
    61 => "10111100100110000000101101010111", 
    62 => "00111101000101111011000000111000", 
    63 => "00111100111111111011100010011000", 
    64 => "00111100110100011100100111100001", 
    65 => "10111100110101101011001111010111", 
    66 => "00111100111111001011111011110011", 
    67 => "00111011101101111001001100011000", 
    68 => "00111101010011101000111001010110", 
    69 => "00111100111011101000010011111100", 
    70 => "00111101111000100101011110000101", 
    71 => "10111100000011010000111011110110", 
    72 => "00111101111011111111000000011011", 
    73 => "00111101011001010111100111100001", 
    74 => "10111100010101110111001001011001", 
    75 => "10111100100101100010001011100110", 
    76 => "00111101001010011100100110111111", 
    77 => "00111101110111010001010100110011", 
    78 => "00111100110000011010000000011011", 
    79 => "00111101110100010010011000011110", 
    80 => "00111110000010111111011000011100", 
    81 => "00111010100101011001111110000000", 
    82 => "00111101111100100110100111010000", 
    83 => "00111101010110110011100101111100", 
    84 => "10111100011110011100000011110101", 
    85 => "00111100011011010101001111001011", 
    86 => "10111101001101000100111101111110", 
    87 => "00111101000110111001001011001001", 
    88 => "10111011100110100101101001111111", 
    89 => "00111101001011001110110011101110", 
    90 => "00111101010101011011011110100000", 
    91 => "00111101100010001101011000000111", 
    92 => "00111101000011110100001101010011", 
    93 => "00111100100101110010101011111010", 
    94 => "10111101100011100001110011010010", 
    95 => "10111101001111000010001111101010", 
    96 => "00111010000110001001110111101011", 
    97 => "00111101100101010010100011001100", 
    98 => "00111100101010010000100110010100", 
    99 => "10111011001110100001101111001001", 
    100 => "00111100010110100011101110000001", 
    101 => "10111011101110100011111010011010", 
    102 => "00111101100100011101111000001000", 
    103 => "10111101001001100110110111011110", 
    104 => "00111101101000001000101010000111", 
    105 => "00111101100101001100101010110010", 
    106 => "00111101011111100000100000010000", 
    107 => "10111100011010001011101000010110", 
    108 => "00111101100001110010100101000001", 
    109 => "00111101010011100001111000110000", 
    110 => "00111110001100101111010110101010", 
    111 => "00111101101010110001110011000011", 
    112 => "00111101101111111101001001000010", 
    113 => "10111011101001011100001001000101", 
    114 => "10111100101001011001001100100111", 
    115 => "00111100111001001100011101110110", 
    116 => "00111101100011101011010011010010", 
    117 => "00111101110101011100010101110100", 
    118 => "00111100111110001010001000110100", 
    119 => "00111100010110111111101011101000", 
    120 => "10111011011011001010111000110111", 
    121 => "00111110000000110010101100010101", 
    122 => "00111101101010011011111111110011", 
    123 => "00111101110100101000101011011110", 
    124 => "00111101000001111011001111010000", 
    125 => "00111100110110101010010100001110", 
    126 => "10111101010110001100101111110111", 
    127 => "00111101010001111111111001001001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity lstm_forward_oncemb6 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of lstm_forward_oncemb6 is
    component lstm_forward_oncemb6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    lstm_forward_oncemb6_rom_U :  component lstm_forward_oncemb6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


