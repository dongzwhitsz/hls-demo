-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    img_ce0 : OUT STD_LOGIC;
    img_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    img_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    img_ce1 : OUT STD_LOGIC;
    img_we1 : OUT STD_LOGIC;
    img_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "top,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-3,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.354450,HLS_SYN_LAT=23070570,HLS_SYN_TPT=none,HLS_SYN_MEM=217,HLS_SYN_DSP=43,HLS_SYN_FF=6374,HLS_SYN_LUT=12122,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_BFF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3F80000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111110000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal c_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_ce0 : STD_LOGIC;
    signal c_we0 : STD_LOGIC;
    signal c_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal h_ce0 : STD_LOGIC;
    signal h_we0 : STD_LOGIC;
    signal h_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_output_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal dense_output_ce0 : STD_LOGIC;
    signal dense_output_we0 : STD_LOGIC;
    signal dense_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal softmax_output_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal softmax_output_ce0 : STD_LOGIC;
    signal softmax_output_we0 : STD_LOGIC;
    signal softmax_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_reg_196 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_i_reg_207 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_i_reg_218 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_240 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_flatten_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_453 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten_reg_453_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_453_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_453_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_453_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_453_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_453_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_453_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_453_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_453_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_453_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_453_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_333_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_i_mid2_v_fu_359_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_i_mid2_v_reg_462 : STD_LOGIC_VECTOR (4 downto 0);
    signal img_addr_reg_467 : STD_LOGIC_VECTOR (9 downto 0);
    signal img_addr_reg_467_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal img_addr_reg_467_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal img_addr_reg_467_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal img_addr_reg_467_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal img_addr_reg_467_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal img_addr_reg_467_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal img_addr_reg_467_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal img_addr_reg_467_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal img_addr_reg_467_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal img_addr_reg_467_pp0_iter10_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal img_addr_reg_467_pp0_iter11_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal j_fu_412_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_105_i_fu_313_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_105_i_reg_478 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_322_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_106_i_reg_483 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_317_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_107_i_reg_488 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_fu_424_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal exitcond_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_501 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state22_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state23_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i_1_fu_442_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal tmp_fu_448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_510 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_softmax_forward_fu_297_ap_ready : STD_LOGIC;
    signal grp_softmax_forward_fu_297_ap_done : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state22 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal grp_dataflow_parent_loop_1_fu_251_img_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_dataflow_parent_loop_1_fu_251_img_ce0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_251_img_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_1_fu_251_img_we0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_251_img_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_dataflow_parent_loop_1_fu_251_img_ce1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_251_img_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_1_fu_251_img_we1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_251_h_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_dataflow_parent_loop_1_fu_251_h_ce0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_251_h_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_1_fu_251_h_we0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_251_h_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_dataflow_parent_loop_1_fu_251_h_ce1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_251_h_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_1_fu_251_h_we1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_251_c_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_dataflow_parent_loop_1_fu_251_c_ce0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_251_c_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_1_fu_251_c_we0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_251_c_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_dataflow_parent_loop_1_fu_251_c_ce1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_251_c_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_1_fu_251_c_we1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_251_ap_start : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_251_ap_done : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_251_ap_ready : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_251_ap_idle : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_251_ap_continue : STD_LOGIC;
    signal grp_dense_forward_fu_285_ap_start : STD_LOGIC;
    signal grp_dense_forward_fu_285_ap_done : STD_LOGIC;
    signal grp_dense_forward_fu_285_ap_idle : STD_LOGIC;
    signal grp_dense_forward_fu_285_ap_ready : STD_LOGIC;
    signal grp_dense_forward_fu_285_h_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_dense_forward_fu_285_h_ce0 : STD_LOGIC;
    signal grp_dense_forward_fu_285_dense_output_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_dense_forward_fu_285_dense_output_ce0 : STD_LOGIC;
    signal grp_dense_forward_fu_285_dense_output_we0 : STD_LOGIC;
    signal grp_dense_forward_fu_285_dense_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_softmax_forward_fu_297_ap_start : STD_LOGIC;
    signal grp_softmax_forward_fu_297_ap_idle : STD_LOGIC;
    signal grp_softmax_forward_fu_297_dense_output_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_softmax_forward_fu_297_dense_output_ce0 : STD_LOGIC;
    signal grp_softmax_forward_fu_297_softmax_output_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_softmax_forward_fu_297_softmax_output_ce0 : STD_LOGIC;
    signal grp_softmax_forward_fu_297_softmax_output_we0 : STD_LOGIC;
    signal grp_softmax_forward_fu_297_softmax_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i_i_phi_fu_211_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_0_i_i_i_reg_229 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond1_i_i_i_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_dataflow_parent_loop_1_fu_251_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_sync_grp_dataflow_parent_loop_1_fu_251_ap_ready : STD_LOGIC;
    signal ap_sync_grp_dataflow_parent_loop_1_fu_251_ap_done : STD_LOGIC;
    signal ap_block_state17_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_dataflow_parent_loop_1_fu_251_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_dataflow_parent_loop_1_fu_251_ap_done : STD_LOGIC := '0';
    signal grp_dense_forward_fu_285_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_softmax_forward_fu_297_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_5_cast_fu_407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_fu_430_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal tmp_108_i_fu_309_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_i3_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_339_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_367_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_379_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_375_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_387_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_i_mid2_fu_351_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_391_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_cast_fu_397_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_fu_401_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component dataflow_parent_loop_1 IS
    port (
        img_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        img_ce0 : OUT STD_LOGIC;
        img_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        img_we0 : OUT STD_LOGIC;
        img_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        img_ce1 : OUT STD_LOGIC;
        img_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        img_we1 : OUT STD_LOGIC;
        h_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        h_ce0 : OUT STD_LOGIC;
        h_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        h_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        h_we0 : OUT STD_LOGIC;
        h_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        h_ce1 : OUT STD_LOGIC;
        h_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        h_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        h_we1 : OUT STD_LOGIC;
        c_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        c_ce0 : OUT STD_LOGIC;
        c_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        c_we0 : OUT STD_LOGIC;
        c_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        c_ce1 : OUT STD_LOGIC;
        c_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        c_we1 : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component dense_forward IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        h_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        h_ce0 : OUT STD_LOGIC;
        h_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dense_output_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        dense_output_ce0 : OUT STD_LOGIC;
        dense_output_we0 : OUT STD_LOGIC;
        dense_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dense_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component softmax_forward IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dense_output_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        dense_output_ce0 : OUT STD_LOGIC;
        dense_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        softmax_output_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        softmax_output_ce0 : OUT STD_LOGIC;
        softmax_output_we0 : OUT STD_LOGIC;
        softmax_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        softmax_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_fptrunc_64ns_CeG IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_fpext_32ns_64DeQ IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component top_dadd_64ns_64nFfa IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component top_dmul_64ns_64nGfk IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component top_c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_softmax_output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    c_U : component top_c
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_address0,
        ce0 => c_ce0,
        we0 => c_we0,
        d0 => c_d0,
        q0 => c_q0);

    h_U : component top_c
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => h_address0,
        ce0 => h_ce0,
        we0 => h_we0,
        d0 => h_d0,
        q0 => h_q0);

    dense_output_U : component top_c
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_output_address0,
        ce0 => dense_output_ce0,
        we0 => dense_output_we0,
        d0 => grp_dense_forward_fu_285_dense_output_d0,
        q0 => dense_output_q0);

    softmax_output_U : component top_softmax_output
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => softmax_output_address0,
        ce0 => softmax_output_ce0,
        we0 => softmax_output_we0,
        d0 => grp_softmax_forward_fu_297_softmax_output_d0,
        q0 => softmax_output_q0);

    grp_dataflow_parent_loop_1_fu_251 : component dataflow_parent_loop_1
    port map (
        img_address0 => grp_dataflow_parent_loop_1_fu_251_img_address0,
        img_ce0 => grp_dataflow_parent_loop_1_fu_251_img_ce0,
        img_d0 => grp_dataflow_parent_loop_1_fu_251_img_d0,
        img_q0 => img_q0,
        img_we0 => grp_dataflow_parent_loop_1_fu_251_img_we0,
        img_address1 => grp_dataflow_parent_loop_1_fu_251_img_address1,
        img_ce1 => grp_dataflow_parent_loop_1_fu_251_img_ce1,
        img_d1 => grp_dataflow_parent_loop_1_fu_251_img_d1,
        img_q1 => ap_const_lv32_0,
        img_we1 => grp_dataflow_parent_loop_1_fu_251_img_we1,
        h_address0 => grp_dataflow_parent_loop_1_fu_251_h_address0,
        h_ce0 => grp_dataflow_parent_loop_1_fu_251_h_ce0,
        h_d0 => grp_dataflow_parent_loop_1_fu_251_h_d0,
        h_q0 => h_q0,
        h_we0 => grp_dataflow_parent_loop_1_fu_251_h_we0,
        h_address1 => grp_dataflow_parent_loop_1_fu_251_h_address1,
        h_ce1 => grp_dataflow_parent_loop_1_fu_251_h_ce1,
        h_d1 => grp_dataflow_parent_loop_1_fu_251_h_d1,
        h_q1 => ap_const_lv32_0,
        h_we1 => grp_dataflow_parent_loop_1_fu_251_h_we1,
        c_address0 => grp_dataflow_parent_loop_1_fu_251_c_address0,
        c_ce0 => grp_dataflow_parent_loop_1_fu_251_c_ce0,
        c_d0 => grp_dataflow_parent_loop_1_fu_251_c_d0,
        c_q0 => c_q0,
        c_we0 => grp_dataflow_parent_loop_1_fu_251_c_we0,
        c_address1 => grp_dataflow_parent_loop_1_fu_251_c_address1,
        c_ce1 => grp_dataflow_parent_loop_1_fu_251_c_ce1,
        c_d1 => grp_dataflow_parent_loop_1_fu_251_c_d1,
        c_q1 => ap_const_lv32_0,
        c_we1 => grp_dataflow_parent_loop_1_fu_251_c_we1,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dataflow_parent_loop_1_fu_251_ap_start,
        ap_done => grp_dataflow_parent_loop_1_fu_251_ap_done,
        ap_ready => grp_dataflow_parent_loop_1_fu_251_ap_ready,
        ap_idle => grp_dataflow_parent_loop_1_fu_251_ap_idle,
        ap_continue => grp_dataflow_parent_loop_1_fu_251_ap_continue);

    grp_dense_forward_fu_285 : component dense_forward
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dense_forward_fu_285_ap_start,
        ap_done => grp_dense_forward_fu_285_ap_done,
        ap_idle => grp_dense_forward_fu_285_ap_idle,
        ap_ready => grp_dense_forward_fu_285_ap_ready,
        h_address0 => grp_dense_forward_fu_285_h_address0,
        h_ce0 => grp_dense_forward_fu_285_h_ce0,
        h_q0 => h_q0,
        dense_output_address0 => grp_dense_forward_fu_285_dense_output_address0,
        dense_output_ce0 => grp_dense_forward_fu_285_dense_output_ce0,
        dense_output_we0 => grp_dense_forward_fu_285_dense_output_we0,
        dense_output_d0 => grp_dense_forward_fu_285_dense_output_d0,
        dense_output_q0 => dense_output_q0);

    grp_softmax_forward_fu_297 : component softmax_forward
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_softmax_forward_fu_297_ap_start,
        ap_done => grp_softmax_forward_fu_297_ap_done,
        ap_idle => grp_softmax_forward_fu_297_ap_idle,
        ap_ready => grp_softmax_forward_fu_297_ap_ready,
        dense_output_address0 => grp_softmax_forward_fu_297_dense_output_address0,
        dense_output_ce0 => grp_softmax_forward_fu_297_dense_output_ce0,
        dense_output_q0 => dense_output_q0,
        softmax_output_address0 => grp_softmax_forward_fu_297_softmax_output_address0,
        softmax_output_ce0 => grp_softmax_forward_fu_297_softmax_output_ce0,
        softmax_output_we0 => grp_softmax_forward_fu_297_softmax_output_we0,
        softmax_output_d0 => grp_softmax_forward_fu_297_softmax_output_d0,
        softmax_output_q0 => softmax_output_q0);

    top_fptrunc_64ns_CeG_U53 : component top_fptrunc_64ns_CeG
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_107_i_reg_488,
        dout => tmp_108_i_fu_309_p1);

    top_fpext_32ns_64DeQ_U54 : component top_fpext_32ns_64DeQ
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => img_q0,
        dout => tmp_105_i_fu_313_p1);

    top_dadd_64ns_64nFfa_U55 : component top_dadd_64ns_64nFfa
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_106_i_reg_483,
        din1 => ap_const_lv64_BFF0000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_317_p2);

    top_dmul_64ns_64nGfk_U56 : component top_dmul_64ns_64nGfk
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_105_i_reg_478,
        din1 => ap_const_lv64_3F80000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_322_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state22) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((grp_softmax_forward_fu_297_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state22))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state22);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((grp_softmax_forward_fu_297_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dataflow_parent_loop_1_fu_251_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_dataflow_parent_loop_1_fu_251_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state17_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                    ap_sync_reg_grp_dataflow_parent_loop_1_fu_251_ap_done <= ap_const_logic_0;
                elsif ((grp_dataflow_parent_loop_1_fu_251_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dataflow_parent_loop_1_fu_251_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dataflow_parent_loop_1_fu_251_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_dataflow_parent_loop_1_fu_251_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state17_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                    ap_sync_reg_grp_dataflow_parent_loop_1_fu_251_ap_ready <= ap_const_logic_0;
                elsif ((grp_dataflow_parent_loop_1_fu_251_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dataflow_parent_loop_1_fu_251_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_dataflow_parent_loop_1_fu_251_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dataflow_parent_loop_1_fu_251_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_sync_grp_dataflow_parent_loop_1_fu_251_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((exitcond1_i_i_i_fu_418_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
                    grp_dataflow_parent_loop_1_fu_251_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dataflow_parent_loop_1_fu_251_ap_ready = ap_const_logic_1)) then 
                    grp_dataflow_parent_loop_1_fu_251_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_dense_forward_fu_285_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dense_forward_fu_285_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    grp_dense_forward_fu_285_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dense_forward_fu_285_ap_ready = ap_const_logic_1)) then 
                    grp_dense_forward_fu_285_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_softmax_forward_fu_297_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_softmax_forward_fu_297_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    grp_softmax_forward_fu_297_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_softmax_forward_fu_297_ap_ready = ap_const_logic_1)) then 
                    grp_softmax_forward_fu_297_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_i_i_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_0_i_i_i_reg_229 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond1_i_i_i_fu_418_p2 = ap_const_lv1_0))) then 
                i_0_i_i_i_reg_229 <= i_3_fu_424_p2;
            end if; 
        end if;
    end process;

    i_i_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_453 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_i_reg_207 <= tmp_i_mid2_v_reg_462;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_i_reg_207 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_fu_436_p2 = ap_const_lv1_0))) then 
                i_reg_240 <= i_1_fu_442_p2;
            elsif (((grp_softmax_forward_fu_297_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                i_reg_240 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_327_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_196 <= indvar_flatten_next_fu_333_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_196 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j_i_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_327_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_i_reg_218 <= j_fu_412_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_i_reg_218 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten_reg_453 <= exitcond_flatten_fu_327_p2;
                exitcond_flatten_reg_453_pp0_iter1_reg <= exitcond_flatten_reg_453;
                img_addr_reg_467_pp0_iter1_reg <= img_addr_reg_467;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exitcond_flatten_reg_453_pp0_iter10_reg <= exitcond_flatten_reg_453_pp0_iter9_reg;
                exitcond_flatten_reg_453_pp0_iter11_reg <= exitcond_flatten_reg_453_pp0_iter10_reg;
                exitcond_flatten_reg_453_pp0_iter2_reg <= exitcond_flatten_reg_453_pp0_iter1_reg;
                exitcond_flatten_reg_453_pp0_iter3_reg <= exitcond_flatten_reg_453_pp0_iter2_reg;
                exitcond_flatten_reg_453_pp0_iter4_reg <= exitcond_flatten_reg_453_pp0_iter3_reg;
                exitcond_flatten_reg_453_pp0_iter5_reg <= exitcond_flatten_reg_453_pp0_iter4_reg;
                exitcond_flatten_reg_453_pp0_iter6_reg <= exitcond_flatten_reg_453_pp0_iter5_reg;
                exitcond_flatten_reg_453_pp0_iter7_reg <= exitcond_flatten_reg_453_pp0_iter6_reg;
                exitcond_flatten_reg_453_pp0_iter8_reg <= exitcond_flatten_reg_453_pp0_iter7_reg;
                exitcond_flatten_reg_453_pp0_iter9_reg <= exitcond_flatten_reg_453_pp0_iter8_reg;
                img_addr_reg_467_pp0_iter10_reg <= img_addr_reg_467_pp0_iter9_reg;
                img_addr_reg_467_pp0_iter11_reg <= img_addr_reg_467_pp0_iter10_reg;
                img_addr_reg_467_pp0_iter2_reg <= img_addr_reg_467_pp0_iter1_reg;
                img_addr_reg_467_pp0_iter3_reg <= img_addr_reg_467_pp0_iter2_reg;
                img_addr_reg_467_pp0_iter4_reg <= img_addr_reg_467_pp0_iter3_reg;
                img_addr_reg_467_pp0_iter5_reg <= img_addr_reg_467_pp0_iter4_reg;
                img_addr_reg_467_pp0_iter6_reg <= img_addr_reg_467_pp0_iter5_reg;
                img_addr_reg_467_pp0_iter7_reg <= img_addr_reg_467_pp0_iter6_reg;
                img_addr_reg_467_pp0_iter8_reg <= img_addr_reg_467_pp0_iter7_reg;
                img_addr_reg_467_pp0_iter9_reg <= img_addr_reg_467_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                exitcond_reg_501 <= exitcond_fu_436_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_327_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                img_addr_reg_467 <= tmp_5_cast_fu_407_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_453 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_105_i_reg_478 <= tmp_105_i_fu_313_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_453_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_106_i_reg_483 <= grp_fu_322_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_453_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_107_i_reg_488 <= grp_fu_317_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_327_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_i_mid2_v_reg_462 <= tmp_i_mid2_v_fu_359_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_fu_436_p2 = ap_const_lv1_0))) then
                    tmp_reg_510(3 downto 0) <= tmp_fu_448_p1(3 downto 0);
            end if;
        end if;
    end process;
    tmp_reg_510(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond_flatten_fu_327_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state16, exitcond_fu_436_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_CS_fsm_state21, grp_softmax_forward_fu_297_ap_done, ap_block_pp1_stage0_subdone, grp_dense_forward_fu_285_ap_done, exitcond1_i_i_i_fu_418_p2, ap_CS_fsm_state17, ap_block_state17_on_subcall_done, ap_CS_fsm_state19)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_flatten_fu_327_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1)) or ((exitcond_flatten_fu_327_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond1_i_i_i_fu_418_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_boolean_0 = ap_block_state17_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((grp_dense_forward_fu_285_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((grp_softmax_forward_fu_297_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_fu_436_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_fu_436_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state15 <= ap_CS_fsm(2);
    ap_CS_fsm_state16 <= ap_CS_fsm(3);
    ap_CS_fsm_state17 <= ap_CS_fsm(4);
    ap_CS_fsm_state18 <= ap_CS_fsm(5);
    ap_CS_fsm_state19 <= ap_CS_fsm(6);
    ap_CS_fsm_state20 <= ap_CS_fsm(7);
    ap_CS_fsm_state21 <= ap_CS_fsm(8);
    ap_CS_fsm_state24 <= ap_CS_fsm(10);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state17_on_subcall_done_assign_proc : process(ap_sync_grp_dataflow_parent_loop_1_fu_251_ap_ready, ap_sync_grp_dataflow_parent_loop_1_fu_251_ap_done)
    begin
                ap_block_state17_on_subcall_done <= ((ap_sync_grp_dataflow_parent_loop_1_fu_251_ap_ready and ap_sync_grp_dataflow_parent_loop_1_fu_251_ap_done) = ap_const_logic_0);
    end process;

        ap_block_state22_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_327_p2)
    begin
        if ((exitcond_flatten_fu_327_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state22_assign_proc : process(exitcond_fu_436_p2)
    begin
        if ((exitcond_fu_436_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state22 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state22 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_i_phi_fu_211_p4_assign_proc : process(i_i_reg_207, exitcond_flatten_reg_453, ap_CS_fsm_pp0_stage0, tmp_i_mid2_v_reg_462, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten_reg_453 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_i_phi_fu_211_p4 <= tmp_i_mid2_v_reg_462;
        else 
            ap_phi_mux_i_i_phi_fu_211_p4 <= i_i_reg_207;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_sync_grp_dataflow_parent_loop_1_fu_251_ap_done <= (grp_dataflow_parent_loop_1_fu_251_ap_done or ap_sync_reg_grp_dataflow_parent_loop_1_fu_251_ap_done);
    ap_sync_grp_dataflow_parent_loop_1_fu_251_ap_ready <= (grp_dataflow_parent_loop_1_fu_251_ap_ready or ap_sync_reg_grp_dataflow_parent_loop_1_fu_251_ap_ready);

    c_address0_assign_proc : process(ap_CS_fsm_state16, grp_dataflow_parent_loop_1_fu_251_c_address0, exitcond1_i_i_i_fu_418_p2, ap_CS_fsm_state17, tmp_i_i_fu_430_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond1_i_i_i_fu_418_p2 = ap_const_lv1_0))) then 
            c_address0 <= tmp_i_i_fu_430_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            c_address0 <= grp_dataflow_parent_loop_1_fu_251_c_address0;
        else 
            c_address0 <= "XXXXXXX";
        end if; 
    end process;


    c_ce0_assign_proc : process(ap_CS_fsm_state16, grp_dataflow_parent_loop_1_fu_251_c_ce0, exitcond1_i_i_i_fu_418_p2, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond1_i_i_i_fu_418_p2 = ap_const_lv1_0))) then 
            c_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            c_ce0 <= grp_dataflow_parent_loop_1_fu_251_c_ce0;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_d0_assign_proc : process(ap_CS_fsm_state16, grp_dataflow_parent_loop_1_fu_251_c_d0, exitcond1_i_i_i_fu_418_p2, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond1_i_i_i_fu_418_p2 = ap_const_lv1_0))) then 
            c_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            c_d0 <= grp_dataflow_parent_loop_1_fu_251_c_d0;
        else 
            c_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    c_we0_assign_proc : process(ap_CS_fsm_state16, grp_dataflow_parent_loop_1_fu_251_c_we0, exitcond1_i_i_i_fu_418_p2, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond1_i_i_i_fu_418_p2 = ap_const_lv1_0))) then 
            c_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            c_we0 <= grp_dataflow_parent_loop_1_fu_251_c_we0;
        else 
            c_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_output_address0_assign_proc : process(ap_CS_fsm_state21, grp_dense_forward_fu_285_dense_output_address0, grp_softmax_forward_fu_297_dense_output_address0, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            dense_output_address0 <= grp_softmax_forward_fu_297_dense_output_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            dense_output_address0 <= grp_dense_forward_fu_285_dense_output_address0;
        else 
            dense_output_address0 <= "XXXXXXX";
        end if; 
    end process;


    dense_output_ce0_assign_proc : process(ap_CS_fsm_state21, grp_dense_forward_fu_285_dense_output_ce0, grp_softmax_forward_fu_297_dense_output_ce0, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            dense_output_ce0 <= grp_softmax_forward_fu_297_dense_output_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            dense_output_ce0 <= grp_dense_forward_fu_285_dense_output_ce0;
        else 
            dense_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_output_we0_assign_proc : process(grp_dense_forward_fu_285_dense_output_we0, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            dense_output_we0 <= grp_dense_forward_fu_285_dense_output_we0;
        else 
            dense_output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_i_i_i_fu_418_p2 <= "1" when (i_0_i_i_i_reg_229 = ap_const_lv8_80) else "0";
    exitcond_flatten_fu_327_p2 <= "1" when (indvar_flatten_reg_196 = ap_const_lv10_310) else "0";
    exitcond_fu_436_p2 <= "1" when (i_reg_240 = ap_const_lv4_A) else "0";
    exitcond_i3_fu_345_p2 <= "1" when (j_i_reg_218 = ap_const_lv5_1C) else "0";

    grp_dataflow_parent_loop_1_fu_251_ap_continue_assign_proc : process(ap_CS_fsm_state17, ap_block_state17_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state17_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_dataflow_parent_loop_1_fu_251_ap_continue <= ap_const_logic_1;
        else 
            grp_dataflow_parent_loop_1_fu_251_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_dataflow_parent_loop_1_fu_251_ap_start <= grp_dataflow_parent_loop_1_fu_251_ap_start_reg;
    grp_dense_forward_fu_285_ap_start <= grp_dense_forward_fu_285_ap_start_reg;
    grp_softmax_forward_fu_297_ap_start <= grp_softmax_forward_fu_297_ap_start_reg;

    h_address0_assign_proc : process(ap_CS_fsm_state16, grp_dataflow_parent_loop_1_fu_251_h_address0, grp_dense_forward_fu_285_h_address0, exitcond1_i_i_i_fu_418_p2, ap_CS_fsm_state17, ap_CS_fsm_state19, tmp_i_i_fu_430_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond1_i_i_i_fu_418_p2 = ap_const_lv1_0))) then 
            h_address0 <= tmp_i_i_fu_430_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            h_address0 <= grp_dense_forward_fu_285_h_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            h_address0 <= grp_dataflow_parent_loop_1_fu_251_h_address0;
        else 
            h_address0 <= "XXXXXXX";
        end if; 
    end process;


    h_ce0_assign_proc : process(ap_CS_fsm_state16, grp_dataflow_parent_loop_1_fu_251_h_ce0, grp_dense_forward_fu_285_h_ce0, exitcond1_i_i_i_fu_418_p2, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond1_i_i_i_fu_418_p2 = ap_const_lv1_0))) then 
            h_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            h_ce0 <= grp_dense_forward_fu_285_h_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            h_ce0 <= grp_dataflow_parent_loop_1_fu_251_h_ce0;
        else 
            h_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    h_d0_assign_proc : process(ap_CS_fsm_state16, grp_dataflow_parent_loop_1_fu_251_h_d0, exitcond1_i_i_i_fu_418_p2, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond1_i_i_i_fu_418_p2 = ap_const_lv1_0))) then 
            h_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            h_d0 <= grp_dataflow_parent_loop_1_fu_251_h_d0;
        else 
            h_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    h_we0_assign_proc : process(ap_CS_fsm_state16, grp_dataflow_parent_loop_1_fu_251_h_we0, exitcond1_i_i_i_fu_418_p2, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond1_i_i_i_fu_418_p2 = ap_const_lv1_0))) then 
            h_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            h_we0 <= grp_dataflow_parent_loop_1_fu_251_h_we0;
        else 
            h_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_442_p2 <= std_logic_vector(unsigned(i_reg_240) + unsigned(ap_const_lv4_1));
    i_2_fu_339_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_i_phi_fu_211_p4) + unsigned(ap_const_lv5_1));
    i_3_fu_424_p2 <= std_logic_vector(unsigned(i_0_i_i_i_reg_229) + unsigned(ap_const_lv8_1));

    img_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, grp_dataflow_parent_loop_1_fu_251_img_address0, ap_block_pp0_stage0, ap_CS_fsm_state17, tmp_5_cast_fu_407_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            img_address0 <= tmp_5_cast_fu_407_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            img_address0 <= grp_dataflow_parent_loop_1_fu_251_img_address0;
        else 
            img_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    img_address1 <= img_addr_reg_467_pp0_iter11_reg;

    img_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, grp_dataflow_parent_loop_1_fu_251_img_ce0, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            img_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            img_ce0 <= grp_dataflow_parent_loop_1_fu_251_img_ce0;
        else 
            img_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    img_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            img_ce1 <= ap_const_logic_1;
        else 
            img_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    img_d1 <= tmp_108_i_fu_309_p1;

    img_we1_assign_proc : process(ap_block_pp0_stage0_11001, exitcond_flatten_reg_453_pp0_iter11_reg, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (exitcond_flatten_reg_453_pp0_iter11_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            img_we1 <= ap_const_logic_1;
        else 
            img_we1 <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_333_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_196) + unsigned(ap_const_lv10_1));
    j_fu_412_p2 <= std_logic_vector(unsigned(j_i_mid2_fu_351_p3) + unsigned(ap_const_lv5_1));
    j_i_mid2_fu_351_p3 <= 
        ap_const_lv5_0 when (exitcond_i3_fu_345_p2(0) = '1') else 
        j_i_reg_218;
    output_r_address0 <= tmp_reg_510(4 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= softmax_output_q0;

    output_r_we0_assign_proc : process(exitcond_reg_501, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_reg_501 = ap_const_lv1_0))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_379_p3),11));
    p_shl_cast_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_367_p3),11));

    softmax_output_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, tmp_fu_448_p1, ap_CS_fsm_state21, grp_softmax_forward_fu_297_softmax_output_address0, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            softmax_output_address0 <= tmp_fu_448_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            softmax_output_address0 <= grp_softmax_forward_fu_297_softmax_output_address0;
        else 
            softmax_output_address0 <= "XXXX";
        end if; 
    end process;


    softmax_output_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_state21, grp_softmax_forward_fu_297_softmax_output_ce0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            softmax_output_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            softmax_output_ce0 <= grp_softmax_forward_fu_297_softmax_output_ce0;
        else 
            softmax_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    softmax_output_we0_assign_proc : process(ap_CS_fsm_state21, grp_softmax_forward_fu_297_softmax_output_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            softmax_output_we0 <= grp_softmax_forward_fu_297_softmax_output_we0;
        else 
            softmax_output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_fu_367_p3 <= (tmp_i_mid2_v_fu_359_p3 & ap_const_lv5_0);
    tmp_3_fu_379_p3 <= (tmp_i_mid2_v_fu_359_p3 & ap_const_lv2_0);
    tmp_4_fu_391_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_375_p1) - unsigned(p_shl1_cast_fu_387_p1));
        tmp_5_cast_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_401_p2),64));

    tmp_5_fu_401_p2 <= std_logic_vector(unsigned(tmp_4_fu_391_p2) + unsigned(tmp_i_cast_fu_397_p1));
    tmp_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_240),64));
    tmp_i_cast_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i_mid2_fu_351_p3),11));
    tmp_i_i_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i_i_reg_229),64));
    tmp_i_mid2_v_fu_359_p3 <= 
        i_2_fu_339_p2 when (exitcond_i3_fu_345_p2(0) = '1') else 
        ap_phi_mux_i_i_phi_fu_211_p4;
end behav;
